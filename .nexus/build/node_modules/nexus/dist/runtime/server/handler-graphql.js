"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRequestHandlerGraphQL = void 0;
const tslib_1 = require("tslib");
const Either_1 = require("fp-ts/lib/Either");
const graphql_1 = require("graphql");
const http_errors_1 = tslib_1.__importDefault(require("http-errors"));
const url_1 = tslib_1.__importDefault(require("url"));
const parse_body_1 = require("./parse-body");
const utils_1 = require("./utils");
/**
 * Create a handler for graphql requests.
 */
exports.createRequestHandlerGraphQL = (schema, createContext) => async (req, res) => {
    const errParams = await getGraphQLParams(req);
    if (Either_1.isLeft(errParams)) {
        return utils_1.sendError(res, errParams.left);
    }
    const params = errParams.right;
    if (typeof params.query !== 'string') {
        return utils_1.sendError(res, http_errors_1.default(400, 'request.body json expected to have a query field'));
    }
    const source = new graphql_1.Source(params.query);
    const errDocumentAST = Either_1.tryCatch(() => graphql_1.parse(source), Either_1.toError);
    if (Either_1.isLeft(errDocumentAST)) {
        return utils_1.sendError(res, http_errors_1.default(400, errDocumentAST.left));
    }
    const documentAST = errDocumentAST.right;
    const validationFailures = graphql_1.validate(schema, documentAST);
    if (validationFailures.length > 0) {
        // todo lots of rich info for clients in here, expose it to them
        return utils_1.sendErrorData(res, http_errors_1.default(400, 'GraphQL operation validation failed', { data: validationFailures }));
    }
    // Only query operations are allowed on GET requests.
    if (req.method === 'GET') {
        const operationAST = graphql_1.getOperationAST(documentAST, params.operationName);
        if (operationAST && operationAST.operation !== 'query') {
            res.setHeader('Allow', 'POST');
            return utils_1.sendError(res, http_errors_1.default(405, `Can only perform a ${operationAST.operation} operation from a POST request.`));
        }
    }
    const context = await createContext(req);
    const result = await graphql_1.execute({
        schema: schema,
        document: documentAST,
        contextValue: context,
        variableValues: params.variables,
        operationName: params.operationName,
    });
    if (result.errors) {
        return utils_1.sendErrorData(res, http_errors_1.default(500, 'failed while resolving client request', { data: result }));
    }
    return utils_1.sendSuccess(res, result);
};
/**
 * Provided a "Request" provided by express or connect (typically a node style
 * HTTPClientRequest), Promise the GraphQL request parameters.
 */
async function getGraphQLParams(request) {
    const bodyData = await parse_body_1.parseBody(request);
    if (Either_1.isLeft(bodyData))
        return bodyData;
    const urlData = (request.url && url_1.default.parse(request.url, true).query) || {};
    return parseGraphQLParams(urlData, bodyData.right);
}
/**
 * Helper function to get the GraphQL params from the request.
 */
function parseGraphQLParams(urlData, bodyData) {
    let query;
    const incomingQuery = urlData.query || bodyData.query;
    if (typeof incomingQuery === 'string') {
        query = incomingQuery;
    }
    else {
        query = null;
    }
    let variables;
    const incomingVariables = urlData.variables || bodyData.variables;
    if (typeof incomingVariables === 'string') {
        try {
            variables = JSON.parse(incomingVariables);
        }
        catch (error) {
            return Either_1.left(http_errors_1.default(400, 'Variables are invalid JSON.'));
        }
    }
    else if (typeof incomingVariables === 'object' && incomingVariables !== null) {
        variables = incomingVariables;
    }
    else {
        variables = null;
    }
    let operationName;
    const incomingOperationName = urlData.operationName || bodyData.operationName;
    if (typeof incomingOperationName === 'string') {
        operationName = incomingOperationName;
    }
    else {
        operationName = null;
    }
    const raw = urlData.raw !== undefined || bodyData.raw !== undefined;
    return Either_1.right({ query, variables, operationName, raw });
}
//# sourceMappingURL=handler-graphql.js.map