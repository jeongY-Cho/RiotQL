"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createServerSettingsManager = exports.changeSettings = exports.playgroundSettings = exports.defaultSettings = exports.defaultPlaygroundSettings = exports.defaultPlaygroundPath = void 0;
const tslib_1 = require("tslib");
const Process = tslib_1.__importStar(require("../../lib/process"));
const Utils = tslib_1.__importStar(require("../../lib/utils"));
const logger_1 = require("./logger");
const log = logger_1.log.child('settings');
exports.defaultPlaygroundPath = '/';
exports.defaultPlaygroundSettings = () => ({
    path: exports.defaultPlaygroundPath,
});
/**
 * The default server options. These are merged with whatever you provide. Your
 * settings take precedence over these.
 */
exports.defaultSettings = () => {
    var _a, _b;
    return {
        host: (_b = (_a = process.env.NEXUS_HOST) !== null && _a !== void 0 ? _a : process.env.HOST) !== null && _b !== void 0 ? _b : undefined,
        port: typeof process.env.NEXUS_PORT === 'string'
            ? parseInt(process.env.NEXUS_PORT, 10)
            : typeof process.env.PORT === 'string'
                ? // e.g. Heroku convention https://stackoverflow.com/questions/28706180/setting-the-port-for-node-js-server-on-heroku
                    parseInt(process.env.PORT, 10)
                : process.env.NODE_ENV === 'production'
                    ? 80
                    : 4000,
        startMessage: ({ port, host, path, playgroundPath }) => {
            logger_1.log.info('listening', {
                url: `http://${Utils.prettifyHost(host)}:${port}${playgroundPath !== null && playgroundPath !== void 0 ? playgroundPath : path}`,
            });
        },
        playground: process.env.NODE_ENV === 'production' ? false : exports.defaultPlaygroundSettings(),
        path: '/graphql',
    };
};
function playgroundPath(settings) {
    if (settings === true) {
        return exports.defaultPlaygroundPath;
    }
    if (settings.path === undefined) {
        return exports.defaultPlaygroundPath;
    }
    if (settings.path.length === 0) {
        Process.fatal('Custom playground `path` cannot be empty and must start with a "/"');
    }
    if (settings.path.startsWith('/') === false) {
        log.warn('Custom playground `path` must start with a "/". Please add it.');
        return '/' + settings.path;
    }
    return settings.path;
}
function playgroundSettings(settings) {
    if (!settings) {
        return false;
    }
    return {
        path: playgroundPath(settings),
    };
}
exports.playgroundSettings = playgroundSettings;
function validateGraphQLPath(path) {
    let outputPath = path;
    if (path.length === 0) {
        Process.fatal('Custom GraphQL `path` cannot be empty and must start with a /');
    }
    if (path.startsWith('/') === false) {
        log.warn('Custom GraphQL `path` must start with a "/". Please add it.');
        outputPath = '/' + outputPath;
    }
    return outputPath;
}
/**
 * Mutate the settings data
 */
function changeSettings(state, newSettings) {
    const updatedSettings = Object.assign(Object.assign({}, state), newSettings);
    state.playground = playgroundSettings(updatedSettings.playground);
    state.path = validateGraphQLPath(updatedSettings.path);
    state.port = updatedSettings.port;
    state.startMessage = updatedSettings.startMessage;
}
exports.changeSettings = changeSettings;
function createServerSettingsManager() {
    const data = exports.defaultSettings();
    function change(newSettings) {
        changeSettings(data, newSettings);
    }
    function reset() {
        for (const k of Object.keys(data)) {
            delete data[k];
        }
        Object.assign(data, exports.defaultSettings());
    }
    return {
        change,
        reset,
        data,
    };
}
exports.createServerSettingsManager = createServerSettingsManager;
//# sourceMappingURL=settings.js.map