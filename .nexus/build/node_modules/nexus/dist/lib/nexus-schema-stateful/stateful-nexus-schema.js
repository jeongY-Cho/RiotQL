"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNexusSchemaStateful = void 0;
const tslib_1 = require("tslib");
const NexusSchema = tslib_1.__importStar(require("@nexus/schema"));
const GraphQL = tslib_1.__importStar(require("graphql"));
function createNexusSchemaStateful() {
    const state = {
        types: [],
        scalars: {},
    };
    function objectType(config) {
        const typeDef = NexusSchema.objectType(config);
        state.types.push(typeDef);
        return typeDef;
    }
    function interfaceType(config) {
        const typeDef = NexusSchema.interfaceType(config);
        state.types.push(typeDef);
        return typeDef;
    }
    function unionType(config) {
        const typeDef = NexusSchema.unionType(config);
        state.types.push(typeDef);
        return typeDef;
    }
    function scalarType(config) {
        const typeDef = NexusSchema.scalarType(config);
        state.types.push(typeDef);
        state.scalars[typeDef.name] = new GraphQL.GraphQLScalarType(config);
        return typeDef;
    }
    function enumType(config) {
        const typeDef = NexusSchema.enumType(config);
        state.types.push(typeDef);
        return typeDef;
    }
    const inputObjectType = (config) => {
        const typeDef = NexusSchema.inputObjectType(config);
        state.types.push(typeDef);
        return typeDef;
    };
    const queryType = (config) => {
        const typeDef = NexusSchema.queryType(config);
        state.types.push(typeDef);
        return typeDef;
    };
    const mutationType = (config) => {
        const typeDef = NexusSchema.mutationType(config);
        state.types.push(typeDef);
        return typeDef;
    };
    const extendType = (config) => {
        const typeDef = NexusSchema.extendType(config);
        state.types.push(typeDef);
        return typeDef;
    };
    const extendInputType = (config) => {
        const typeDef = NexusSchema.extendInputType(config);
        state.types.push(typeDef);
        return typeDef;
    };
    function importType(type, methodName) {
        if (type instanceof GraphQL.GraphQLScalarType && methodName) {
            const typeDef = NexusSchema.asNexusMethod(type, methodName);
            state.types.push(typeDef);
            state.scalars[typeDef.name] = typeDef;
            return typeDef;
        }
        state.types.push(type);
        return type;
    }
    const arg = NexusSchema.arg;
    const intArg = NexusSchema.intArg;
    const stringArg = NexusSchema.stringArg;
    const idArg = NexusSchema.idArg;
    const floatArg = NexusSchema.floatArg;
    const booleanArg = NexusSchema.booleanArg;
    return {
        state: state,
        builders: {
            queryType,
            mutationType,
            objectType,
            inputObjectType,
            unionType,
            interfaceType,
            enumType,
            scalarType,
            arg,
            intArg,
            stringArg,
            idArg,
            floatArg,
            booleanArg,
            extendType,
            extendInputType,
            importType,
        },
    };
}
exports.createNexusSchemaStateful = createNexusSchemaStateful;
//# sourceMappingURL=stateful-nexus-schema.js.map