"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultFilterSetting = exports.processSettingInputFilter = exports.create = exports.processSettingInputPretty = exports.processSettingInputData = void 0;
const tslib_1 = require("tslib");
const chalk_1 = require("./chalk");
const Filter = tslib_1.__importStar(require("./filter"));
const Level = tslib_1.__importStar(require("./level"));
const utils_1 = require("./utils");
/**
 * Process data setting input.
 */
function processSettingInputData(data, previous) {
    if (!previous) {
        return {
            ...defaultSettingData(),
            ...utils_1.omitUndefinedKeys(data),
        };
    }
    return {
        ...previous,
        ...utils_1.omitUndefinedKeys(data !== null && data !== void 0 ? data : {}),
    };
}
exports.processSettingInputData = processSettingInputData;
function defaultSettingData() {
    if (process.env.NODE_ENV === 'production') {
        return {
            hostname: true,
            pid: true,
            time: true,
        };
    }
    else {
        return {
            hostname: false,
            pid: false,
            time: false,
        };
    }
}
/**
 * Process pretty setting input.
 */
function processSettingInputPretty(pretty, previous) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    // todo no semantic to "unset back to default"
    // consider using `null` for that purpose...
    const color = (_b = (_a = (typeof pretty === 'object' ? pretty.color : undefined)) !== null && _a !== void 0 ? _a : previous === null || previous === void 0 ? void 0 : previous.color) !== null && _b !== void 0 ? _b : true;
    const enabled = (_d = (_c = (typeof pretty === 'object' ? pretty.enabled : undefined)) !== null && _c !== void 0 ? _c : previous === null || previous === void 0 ? void 0 : previous.enabled) !== null && _d !== void 0 ? _d : 
    // todo nice is-defined-but-parse-error feedback
    (((_e = process.env.LOG_PRETTY) === null || _e === void 0 ? void 0 : _e.toLowerCase()) === 'true'
        ? true
        : ((_f = process.env.LOG_PRETTY) === null || _f === void 0 ? void 0 : _f.toLowerCase()) === 'false'
            ? false
            : process.stdout.isTTY);
    const levelLabel = (_h = (_g = (typeof pretty === 'object' ? pretty.levelLabel : undefined)) !== null && _g !== void 0 ? _g : previous === null || previous === void 0 ? void 0 : previous.levelLabel) !== null && _h !== void 0 ? _h : false;
    const timeDiff = (_k = (_j = (typeof pretty === 'object' ? pretty.timeDiff : undefined)) !== null && _j !== void 0 ? _j : previous === null || previous === void 0 ? void 0 : previous.timeDiff) !== null && _k !== void 0 ? _k : true;
    if (pretty === undefined) {
        return { enabled, color, levelLabel, timeDiff };
    }
    if (pretty === true) {
        return { enabled: true, color, levelLabel, timeDiff };
    }
    if (pretty === false) {
        return { enabled: false, color, levelLabel, timeDiff };
    }
    if (typeof pretty === 'object') {
        return { enabled, color, levelLabel, timeDiff };
    }
    utils_1.casesHandled(pretty);
}
exports.processSettingInputPretty = processSettingInputPretty;
function create(opts) {
    var _a, _b;
    const state = {
        pretty: processSettingInputPretty(opts === null || opts === void 0 ? void 0 : opts.pretty, null),
        filter: utils_1.isEmpty(opts === null || opts === void 0 ? void 0 : opts.filter) ? defaultFilterSetting() : processSettingInputFilter(opts.filter, null),
        output: (_a = opts === null || opts === void 0 ? void 0 : opts.output) !== null && _a !== void 0 ? _a : process.stdout,
        data: processSettingInputData((_b = opts === null || opts === void 0 ? void 0 : opts.data) !== null && _b !== void 0 ? _b : {}, null),
    };
    const settings = ((newSettings) => {
        if (newSettings.output) {
            // @ts-ignore
            settings.output = newSettings.output;
        }
        if ('pretty' in newSettings) {
            // @ts-ignore
            settings.pretty = processSettingInputPretty(newSettings.pretty, settings.pretty);
            // Sync chalk
            // Assume true color support, not doing all that -> https://github.com/chalk/chalk#256-and-truecolor-color-support
            chalk_1.chalk.level = settings.pretty.color ? 3 : 0;
        }
        if ('data' in newSettings) {
            // @ts-ignore
            settings.data = processSettingInputData(newSettings.data, settings.data);
        }
        if (!utils_1.isEmpty(newSettings.filter)) {
            // @ts-ignore
            settings.filter = processSettingInputFilter(newSettings.filter, settings.filter);
        }
    });
    Object.assign(settings, state);
    return settings;
}
exports.create = create;
function processSettingInputFilter(newSettingsFilter, prev) {
    var _a;
    if (!prev)
        prev = defaultFilterSetting();
    newSettingsFilter =
        typeof newSettingsFilter === 'string' ? { pattern: newSettingsFilter } : newSettingsFilter;
    const pattern = (_a = newSettingsFilter.pattern) !== null && _a !== void 0 ? _a : prev.originalInput;
    const defaults = (newSettingsFilter === null || newSettingsFilter === void 0 ? void 0 : newSettingsFilter.level) ? { level: { value: newSettingsFilter.level, comp: 'gte' } }
        : prev.defaults;
    const patterns = Filter.processLogFilterInput(defaults, pattern) || Filter.parseUnsafe(defaults, '*');
    return {
        defaults,
        originalInput: pattern,
        patterns,
    };
}
exports.processSettingInputFilter = processSettingInputFilter;
function defaultFilterSetting() {
    let level;
    if (process.env.LOG_LEVEL) {
        level = utils_1.parseFromEnvironment('LOG_LEVEL', Level.parser);
    }
    else {
        level = process.env.NODE_ENV === 'production' ? Level.LEVELS.info.label : Level.LEVELS.debug.label;
    }
    let originalInput;
    let patterns;
    if (process.env.LOG_FILTER) {
        patterns = Filter.processLogFilterInput({ level: { value: level, comp: 'gte' } }, process.env.LOG_FILTER, 'environment variable LOG_FILTER.');
    }
    if (!patterns) {
        originalInput = '*';
        patterns = Filter.parseUnsafe({ level: { value: level, comp: 'gte' } }, originalInput);
    }
    return {
        originalInput: originalInput,
        defaults: { level: { value: level, comp: 'gte' } },
        patterns,
    };
}
exports.defaultFilterSetting = defaultFilterSetting;
//# sourceMappingURL=settings.js.map