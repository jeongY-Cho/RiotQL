### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum AllRankedQueues {
  RANKED_FLEX_SR
  RANKED_FLEX_TT
  RANKED_SOLO_5x5
  RANKED_TFT
}

type ChampionMastery {
  byChampion(
    """
    Get all champion mastery entries sorted by number of champion points descending filtered by champion Ids if specified.
    """
    champIds: [Int!]
  ): [Championmasteryv4ChampionMastery!]

  """
  Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
  """
  score: Int!
}

"""
This object contains single Champion Mastery information for player and champion combination.
"""
type Championmasteryv4ChampionMastery {
  """Champion ID for this entry."""
  championId: Float!

  """Champion level for specified player and champion combination."""
  championLevel: Int!

  """
  Total number of champion points for this player and champion combination - they are used to determine championLevel.
  """
  championPoints: Int!

  """Number of points earned since current level has been achieved."""
  championPointsSinceLastLevel: Float!

  """
  Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.
  """
  championPointsUntilNextLevel: Float!

  """Is chest granted for this champion or not in current season."""
  chestGranted: Boolean!

  """
  Last time this champion was played by this player - in Unix milliseconds time format.
  """
  lastPlayTime: Float!

  """Summoner ID for this entry. (Encrypted)"""
  summonerId: String!

  """The token earned for this champion to levelup."""
  tokensEarned: Int!
}

type Championv3ChampionInfo {
  freeChampionIds: [Int]!
  freeChampionIdsForNewPlayers: [Int]!
  maxNewPlayerLevel: Int!
}

type Clashv1Player {
  """
  (Legal values:  UNSELECTED,  FILL,  TOP,  JUNGLE,  MIDDLE,  BOTTOM,  UTILITY)
  """
  position: Position!

  """(Legal values:  CAPTAIN,  MEMBER)"""
  role: Role!
  summonerId: String!
  teamId: String!
}

type Clashv1PlayerRegistration {
  """Clash lane assignment"""
  position: Position!

  """Clash team role assignment"""
  role: Role!
  summonerId: String!

  """Clash team details"""
  team: Clashv1Team!
  teamId: String!
}

type Clashv1Team {
  abbreviation: String!

  """Summoner ID of the team captain."""
  captain: String!
  iconId: Int!
  id: String!
  name: String!

  """Team members."""
  players: [Clashv1Player]!
  tier: Int!
  tournamentId: Int!
}

type Clashv1Tournament {
  id: Int!
  nameKey: String!
  nameKeySecondary: String!

  """Tournament phase."""
  schedule: [Clashv1TournamentPhase]!
  themeId: Int!
}

type Clashv1TournamentPhase {
  cancelled: Boolean!
  id: Int!
  registrationTime: Float!
  startTime: Float!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum Division {
  I
  II
  III
  IV
}

enum Division2 {
  I
  II
  III
  IV
}

enum Game {
  League

  """LOR is not implemented"""
  LOR
  TFT
}

enum GameMode {
  ARAM
  ASCENSION
  CLASSIC
  FIRSTBLOOD
  KINGPORO
  ODIN
  ONEFORALL
  TUTORIAL
}

enum GameType {
  CUSTOM_GAME
  MATCHED_GAME
  TUTORIAL_GAME
}

enum HighestAchievedSeasonTier {
  BRONZE
  CHALLENGER
  DIAMOND
  GOLD
  MASTER
  PLATINUM
  SILVER
  UNRANKED
}

type Info {
  constants: String
  description: String!
  repo: String
  version: String
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

enum Lane {
  BOT
  BOTTOM
  JUNGLE
  MID
  MIDDLE
  TOP
}

type Leagueexpv4LeagueEntry {
  freshBlood: Boolean!
  hotStreak: Boolean!
  inactive: Boolean!
  leagueId: String!
  leaguePoints: Int!

  """
  Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics.
  """
  losses: Int!
  miniSeries: Leagueexpv4MiniSeries
  queueType: String!
  rank: String!

  """Player's summonerId (Encrypted)"""
  summonerId: String!
  summonerName: String!
  tier: String!
  veteran: Boolean!

  """Winning team on Summoners Rift. First placement in Teamfight Tactics."""
  wins: Int!
}

type Leagueexpv4MiniSeries {
  losses: Int!
  progress: String!
  target: Int!
  wins: Int!
}

type Leaguev4LeagueEntry {
  freshBlood: Boolean!
  hotStreak: Boolean!
  inactive: Boolean!
  leagueId: String!
  leaguePoints: Int!

  """Losing team on Summoners Rift."""
  losses: Int!
  miniSeries: Leaguev4MiniSeries
  queueType: String!
  rank: String!

  """Player's encrypted summonerId."""
  summonerId: String!
  summonerName: String!
  tier: String!
  veteran: Boolean!

  """Winning team on Summoners Rift."""
  wins: Int!
}

type Leaguev4LeagueItem {
  freshBlood: Boolean!
  hotStreak: Boolean!
  inactive: Boolean!
  leaguePoints: Int!

  """Losing team on Summoners Rift."""
  losses: Int!
  miniSeries: Leaguev4MiniSeries
  rank: String!

  """Player's encrypted summonerId."""
  summonerId: String!
  summonerName: String!
  veteran: Boolean!

  """Winning team on Summoners Rift."""
  wins: Int!
}

type Leaguev4LeagueList {
  entries: [Leaguev4LeagueItem]!
  leagueId: String!
  name: String!
  queue: String!
  tier: String!
}

type Leaguev4MiniSeries {
  losses: Int!
  progress: String!
  target: Int!
  wins: Int!
}

type Lolstatusv3Incident {
  active: Boolean!
  created_at: String!
  id: Float!
  updates: [Lolstatusv3Message]!
}

type Lolstatusv3Message {
  author: String!
  content: String!
  created_at: String!
  id: String!
  severity: String!
  translations: [Lolstatusv3Translation]!
  updated_at: String!
}

type Lolstatusv3Service {
  incidents: [Lolstatusv3Incident]!
  name: String!
  slug: String!
  status: String!
}

type Lolstatusv3ShardStatus {
  hostname: String!
  locales: [String]!
  name: String!
  region_tag: String!
  services: [Lolstatusv3Service]!
  slug: String!
}

type Lolstatusv3Translation {
  content: String!
  heading: String!
  locale: String!
}

scalar Long

type Lorrankedv1Leaderboard {
  """A list of players in Master tier."""
  players: [Lorrankedv1Player]!
}

type Lorrankedv1Player {
  """League points."""
  lp: Int!
  name: String!
  rank: Int!
}

enum LowerTier {
  BRONZE
  DIAMOND
  GOLD
  IRON
  PLATINUM
  SILVER
}

enum MapType {
  HOWLING_ABYSS
  SUMMONERS_RIFT
  TWISTED_TREELINE
}

enum MapType2 {
  HOWLING_ABYSS
  SUMMONERS_RIFT
  TWISTED_TREELINE
}

union Match = Matchv4Match | Tftmatchv1Match

scalar MatchId

"""Matchlist return types. TFT matchlist returns only a list of ids"""
union MatchList = Matchv4Matchlist | TFTMatchIdList

input MatchListFilterInput {
  """
  First index of game to be returned.
  
  See notes.
  """
  beginIndex: Int

  """Timestamp in UNIX milliseconds"""
  beginTime: Long

  """Champion Ids"""
  champion: [Int!]

  """
  Number of matches to return
  
  #### Note:
  
  Only for TFT
  """
  count: Int

  """
  Last index of game to be returned.
  
  See notes
  """
  endIndex: Int

  """Timestamp in UNIX milliseconds"""
  endTime: Long

  """Queue type by id"""
  queue: [QueueId!]

  """Season"""
  season: [Int!]
}

type Matchv4Mastery {
  masteryId: Int!
  rank: Int!
}

type Matchv4Match {
  """
  Designates the timestamp when champion select ended and the loading screen appeared, NOT when the game timer was at 0:00.
  """
  gameCreation: Float!

  """Match duration in seconds."""
  gameDuration: Float!
  gameId: Float!

  """Please refer to the Game Constants documentation."""
  gameMode: String!

  """Please refer to the Game Constants documentation."""
  gameType: String!

  """
  The major.minor version typically indicates the patch the match was played on.
  """
  gameVersion: String!

  """Please refer to the Game Constants documentation."""
  mapId: Int!

  """
  Participant identity information. Participant identity information is purposefully excluded for custom games.
  """
  participantIdentities: [Matchv4ParticipantIdentity]!

  """Participant information."""
  participants: [Matchv4Participant]!

  """Platform where the match was played."""
  platformId: String!

  """Please refer to the Game Constants documentation."""
  queueId: Int!

  """Please refer to the Game Constants documentation."""
  seasonId: Int!

  """Team information."""
  teams: [Matchv4TeamStats]!
}

type Matchv4MatchEvent {
  afterId: Int
  ascendedType: String
  assistingParticipantIds: [Int]
  beforeId: Int
  buildingType: String
  creatorId: Int
  eventType: String
  itemId: Int
  killerId: Int
  laneType: String
  levelUpType: String
  monsterSubType: String
  monsterType: String
  participantId: Int
  pointCaptured: String
  position: Matchv4MatchPosition
  skillSlot: Int
  teamId: Int
  timestamp: Float!
  towerType: String

  """
  (Legal values:  CHAMPION_KILL,  WARD_PLACED,  WARD_KILL,  BUILDING_KILL, 
  ELITE_MONSTER_KILL,  ITEM_PURCHASED,  ITEM_SOLD,  ITEM_DESTROYED,  ITEM_UNDO, 
  SKILL_LEVEL_UP,  ASCENDED_EVENT,  CAPTURE_POINT,  PORO_KING_SUMMON)
  """
  type: Type!
  victimId: Int
  wardType: String
}

type Matchv4MatchFrame {
  events: [Matchv4MatchEvent]!
  participantFrames: JSON!
  timestamp: Float!
}

type Matchv4Matchlist {
  endIndex: Int!
  matches: [Matchv4MatchReference]!
  startIndex: Int!

  """
  There is a known issue that this field doesn't correctly return the total
  number of games that match the parameters of the request. Please paginate
  using beginIndex until you reach the end of a player's matchlist.
  """
  totalGames: Int!
}

type Matchv4MatchPosition {
  x: Int!
  y: Int!
}

type Matchv4MatchReference {
  champion: Int!
  gameId: Float!
  lane: String!
  platformId: String!
  queue: Int!
  role: String!
  season: Int!
  timestamp: Float!
}

type Matchv4MatchTimeline {
  frameInterval: Float!
  frames: [Matchv4MatchFrame]!
}

type Matchv4Participant {
  championId: Int!

  """
  Highest ranked tier achieved for the previous season in a specific subset of
  queueIds, if any, otherwise null. Used to display border in game loading
  screen. Please refer to the Ranked Info documentation.
               (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED)
  """
  highestAchievedSeasonTier: HighestAchievedSeasonTier

  """
  List of legacy Mastery information. Not included for matches played with Runes Reforged.
  """
  masteries: [Matchv4Mastery]
  participantId: Int!

  """
  List of legacy Rune information. Not included for matches played with Runes Reforged.
  """
  runes: [Matchv4Rune]

  """First Summoner Spell id."""
  spell1Id: Int!

  """Second Summoner Spell id."""
  spell2Id: Int!
  stats: Matchv4ParticipantStats!

  """100 for blue side. 200 for red side."""
  teamId: Int!
  timeline: Matchv4ParticipantTimeline!
}

type Matchv4ParticipantIdentity {
  participantId: Int!
  player: Matchv4Player!
}

type Matchv4ParticipantStats {
  altarsCaptured: Int
  altarsNeutralized: Int
  assists: Int!
  champLevel: Int!
  combatPlayerScore: Int
  damageDealtToObjectives: Float!
  damageDealtToTurrets: Float!
  damageSelfMitigated: Float!
  deaths: Int!
  doubleKills: Int!
  firstBloodAssist: Boolean
  firstBloodKill: Boolean
  firstInhibitorAssist: Boolean
  firstInhibitorKill: Boolean
  firstTowerAssist: Boolean
  firstTowerKill: Boolean
  goldEarned: Int!
  goldSpent: Int!
  inhibitorKills: Int
  item0: Int!
  item1: Int!
  item2: Int!
  item3: Int!
  item4: Int!
  item5: Int!
  item6: Int!
  killingSprees: Int!
  kills: Int!
  largestCriticalStrike: Int!
  largestKillingSpree: Int!
  largestMultiKill: Int!
  longestTimeSpentLiving: Int!
  magicalDamageTaken: Float!
  magicDamageDealt: Float!
  magicDamageDealtToChampions: Float!
  neutralMinionsKilled: Int!
  neutralMinionsKilledEnemyJungle: Int!
  neutralMinionsKilledTeamJungle: Int!
  nodeCapture: Int
  nodeCaptureAssist: Int
  nodeNeutralize: Int
  nodeNeutralizeAssist: Int
  objectivePlayerScore: Int
  participantId: Int!
  pentaKills: Int!

  """Primary path keystone rune."""
  perk0: Int

  """Post game rune stats."""
  perk0Var1: Int

  """Post game rune stats."""
  perk0Var2: Int

  """Post game rune stats."""
  perk0Var3: Int

  """Primary path rune."""
  perk1: Int

  """Post game rune stats."""
  perk1Var1: Int

  """Post game rune stats."""
  perk1Var2: Int

  """Post game rune stats."""
  perk1Var3: Int

  """Primary path rune."""
  perk2: Int

  """Post game rune stats."""
  perk2Var1: Int

  """Post game rune stats."""
  perk2Var2: Int

  """Post game rune stats."""
  perk2Var3: Int

  """Primary path rune."""
  perk3: Int

  """Post game rune stats."""
  perk3Var1: Int

  """Post game rune stats."""
  perk3Var2: Int

  """Post game rune stats."""
  perk3Var3: Int

  """Secondary path rune."""
  perk4: Int

  """Post game rune stats."""
  perk4Var1: Int

  """Post game rune stats."""
  perk4Var2: Int

  """Post game rune stats."""
  perk4Var3: Int

  """Secondary path rune."""
  perk5: Int

  """Post game rune stats."""
  perk5Var1: Int

  """Post game rune stats."""
  perk5Var2: Int

  """Post game rune stats."""
  perk5Var3: Int

  """Primary rune path"""
  perkPrimaryStyle: Int

  """Secondary rune path"""
  perkSubStyle: Int
  physicalDamageDealt: Float!
  physicalDamageDealtToChampions: Float!
  physicalDamageTaken: Float!
  playerScore0: Int
  playerScore1: Int
  playerScore2: Int
  playerScore3: Int
  playerScore4: Int
  playerScore5: Int
  playerScore6: Int
  playerScore7: Int
  playerScore8: Int
  playerScore9: Int
  quadraKills: Int!
  sightWardsBoughtInGame: Int
  teamObjective: Int
  timeCCingOthers: Float!
  totalDamageDealt: Float!
  totalDamageDealtToChampions: Float!
  totalDamageTaken: Float!
  totalHeal: Float!
  totalMinionsKilled: Int!
  totalPlayerScore: Int
  totalScoreRank: Int
  totalTimeCrowdControlDealt: Int!
  totalUnitsHealed: Int!
  tripleKills: Int!
  trueDamageDealt: Float!
  trueDamageDealtToChampions: Float!
  trueDamageTaken: Float!
  turretKills: Int
  unrealKills: Int!
  visionScore: Float
  visionWardsBoughtInGame: Int!
  wardsKilled: Int!
  wardsPlaced: Int
  win: Boolean!
}

type Matchv4ParticipantTimeline {
  """Creeps for a specified period."""
  creepsPerMinDeltas: JSON

  """
  Creep score difference versus the calculated lane opponent(s) for a specified period.
  """
  csDiffPerMinDeltas: JSON

  """
  Damage taken difference versus the calculated lane opponent(s) for a specified period.
  """
  damageTakenDiffPerMinDeltas: JSON

  """Damage taken for a specified period."""
  damageTakenPerMinDeltas: JSON

  """Gold for a specified period."""
  goldPerMinDeltas: JSON

  """
  Participant's calculated lane. MID and BOT are legacy values.
               (Legal values:  MID,  MIDDLE,  TOP,  JUNGLE,  BOT,  BOTTOM)
  """
  lane: Lane
  participantId: Int

  """
  Participant's calculated role.
               (Legal values:  DUO,  NONE,  SOLO,  DUO_CARRY,  DUO_SUPPORT)
  """
  role: Role2

  """
  Experience difference versus the calculated lane opponent(s) for a specified period.
  """
  xpDiffPerMinDeltas: JSON

  """Experience change for a specified period."""
  xpPerMinDeltas: JSON
}

type Matchv4Player {
  """Player's original accountId."""
  accountId: String!

  """Player's current accountId when the match was played."""
  currentAccountId: String!

  """Player's current platformId when the match was played."""
  currentPlatformId: String!
  matchHistoryUri: String!

  """Player's original platformId."""
  platformId: String!
  profileIcon: Int!

  """Player's summonerId (Encrypted)"""
  summonerId: String!
  summonerName: String!
}

type Matchv4Rune {
  rank: Int!
  runeId: Int!
}

type Matchv4TeamBans {
  """Banned championId."""
  championId: Int!

  """Turn during which the champion was banned."""
  pickTurn: Int!
}

type Matchv4TeamStats {
  """
  If match queueId has a draft, contains banned champion data, otherwise empty.
  """
  bans: [Matchv4TeamBans]!

  """Number of times the team killed Baron."""
  baronKills: Int!

  """For Dominion matches, specifies the points the team had at game end."""
  dominionVictoryScore: Int!

  """Number of times the team killed Dragon."""
  dragonKills: Int!

  """Flag indicating whether or not the team scored the first Baron kill."""
  firstBaron: Boolean!

  """Flag indicating whether or not the team scored the first blood."""
  firstBlood: Boolean!

  """Flag indicating whether or not the team scored the first Dragon kill."""
  firstDragon: Boolean!

  """Flag indicating whether or not the team destroyed the first inhibitor."""
  firstInhibitor: Boolean!

  """
  Flag indicating whether or not the team scored the first Rift Herald kill.
  """
  firstRiftHerald: Boolean!

  """Flag indicating whether or not the team destroyed the first tower."""
  firstTower: Boolean!

  """Number of inhibitors the team destroyed."""
  inhibitorKills: Int!

  """Number of times the team killed Rift Herald."""
  riftHeraldKills: Int!

  """100 for blue side. 200 for red side."""
  teamId: Int!

  """Number of towers the team destroyed."""
  towerKills: Int!

  """Number of times the team killed Vilemaw."""
  vilemawKills: Int!

  """
  String indicating whether or not the team won. There are only two values visibile in public match history.
               (Legal values:  Fail,  Win)
  """
  win: Win!
}

enum PickType {
  ALL_RANDOM
  BLIND_PICK
  DRAFT_MODE
  TOURNAMENT_DRAFT
}

enum PickType2 {
  ALL_RANDOM
  BLIND_PICK
  DRAFT_MODE
  TOURNAMENT_DRAFT
}

enum Position {
  BOTTOM
  FILL
  JUNGLE
  MIDDLE
  TOP
  UNSELECTED
  UTILITY
}

type Query {
  info: Info!
  match(game: Game!, matchId: MatchId!, region: RegionInput!): Match
  rankedLeague(division: Division!, page: Int, queue: AllRankedQueues!, region: RegionInput!, tier: LowerTier!): [Leaguev4LeagueEntry!]!

  """
  #### Implementation Notes:
  
  use the following arg combinations to get league lists
  
  ##### param combinations:
  
  	ier & queue -> for ranks master and above
  
  leagueId & game -> for all ranks
  
  leagueId & queue -> for all ranks
  """
  rankedList(game: Game, leagueId: String, queue: AllRankedQueues, region: RegionInput!, tier: Tier): Leaguev4LeagueList
  summoner(encryptedAccountId: String, encryptedPUUID: String, encryptedSummonerId: String, region: RegionInput!, summonerName: String): Summonerv4Summoner!
  tournament(code: String!): Tournamentv4TournamentCode
  tournamentStub(code: String!): TournamentStub!
}

enum Queue {
  RANKED_FLEX_SR
  RANKED_FLEX_TT
  RANKED_SOLO_5X5
  RANKED_TFT
}

enum Queue2 {
  RANKED_FLEX_SR
  RANKED_FLEX_TT
  RANKED_SOLO_5X5
}

"""League Game Queue Ids"""
enum QueueId {
  _420
  _440
}

enum Region {
  BR
  EUNE
  EUW
  JP
  LAN
  LAS
  NA
  OCE
  PBE
  RU
  TR
}

enum Region2 {
  BR
  EUNE
  EUW
  JP
  LAN
  LAS
  NA
  OCE
  PBE
  RU
  TR
}

enum RegionInput {
  americas
  asia
  br1
  eun1
  europe
  euw1
  jp1
  kr
  la1
  la2
  na1
  oc1
  ru
  tr1
}

enum Role {
  CAPTAIN
  MEMBER
}

enum Role2 {
  DUO
  DUO_CARRY
  DUO_SUPPORT
  NONE
  SOLO
}

enum SpectatorType {
  ALL
  LOBBYONLY
  NONE
}

enum SpectatorType2 {
  ALL
  LOBBYONLY
  NONE
}

type Spectatorv4BannedChampion {
  """The ID of the banned champion"""
  championId: Float!

  """The turn during which the champion was banned"""
  pickTurn: Int!

  """The ID of the team that banned the champion"""
  teamId: Float!
}

type Spectatorv4CurrentGameInfo {
  """Banned champion information"""
  bannedChampions: [Spectatorv4BannedChampion]!

  """The ID of the game"""
  gameId: Float!

  """The amount of time in seconds that has passed since the game started"""
  gameLength: Float!

  """The game mode"""
  gameMode: String!

  """The queue type (queue types are documented on the Game Constants page)"""
  gameQueueConfigId: Float

  """The game start time represented in epoch milliseconds"""
  gameStartTime: Float!

  """The game type"""
  gameType: String!

  """The ID of the map"""
  mapId: Float!
  observers: Spectatorv4Observer!

  """The participant information"""
  participants: [Spectatorv4CurrentGameParticipant]!

  """The ID of the platform on which the game is being played"""
  platformId: String!
}

type Spectatorv4CurrentGameParticipant {
  """Flag indicating whether or not this participant is a bot"""
  bot: Boolean!

  """The ID of the champion played by this participant"""
  championId: Float!

  """List of Game Customizations"""
  gameCustomizationObjects: [Spectatorv4GameCustomizationObject]!
  perks: Spectatorv4Perks!

  """The ID of the profile icon used by this participant"""
  profileIconId: Float!

  """The ID of the first summoner spell used by this participant"""
  spell1Id: Float!

  """The ID of the second summoner spell used by this participant"""
  spell2Id: Float!

  """The encrypted summoner ID of this participant"""
  summonerId: String!

  """The summoner name of this participant"""
  summonerName: String!

  """The team ID of this participant, indicating the participant's team"""
  teamId: Float!
}

type Spectatorv4FeaturedGameInfo {
  """Banned champion information"""
  bannedChampions: [Spectatorv4BannedChampion]!

  """The ID of the game"""
  gameId: Float!

  """The amount of time in seconds that has passed since the game started"""
  gameLength: Float!

  """
  The game mode
               (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO)
  """
  gameMode: GameMode!

  """The queue type (queue types are documented on the Game Constants page)"""
  gameQueueConfigId: Float!

  """The game start time represented in epoch milliseconds"""
  gameStartTime: Float!

  """
  The game type
               (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME)
  """
  gameType: GameType!

  """The ID of the map"""
  mapId: Float!
  observers: Spectatorv4Observer!

  """The participant information"""
  participants: [Spectatorv4Participant]!

  """The ID of the platform on which the game is being played"""
  platformId: String!
}

type Spectatorv4FeaturedGames {
  """The suggested interval to wait before requesting FeaturedGames again"""
  clientRefreshInterval: Float!

  """The list of featured games"""
  gameList: [Spectatorv4FeaturedGameInfo]!
}

type Spectatorv4GameCustomizationObject {
  """Category identifier for Game Customization"""
  category: String!

  """Game Customization content"""
  content: String!
}

type Spectatorv4Observer {
  """Key used to decrypt the spectator grid game data for playback"""
  encryptionKey: String!
}

type Spectatorv4Participant {
  """Flag indicating whether or not this participant is a bot"""
  bot: Boolean!

  """The ID of the champion played by this participant"""
  championId: Float!

  """The ID of the profile icon used by this participant"""
  profileIconId: Float!

  """The ID of the first summoner spell used by this participant"""
  spell1Id: Float!

  """The ID of the second summoner spell used by this participant"""
  spell2Id: Float!

  """The summoner name of this participant"""
  summonerName: String!

  """The team ID of this participant, indicating the participant's team"""
  teamId: Float!
}

type Spectatorv4Perks {
  """IDs of the perks/runes assigned."""
  perkIds: [Float]!

  """Primary runes path"""
  perkStyle: Float!

  """Secondary runes path"""
  perkSubStyle: Float!
}

"""represents a summoner"""
type Summonerv4Summoner {
  """Encrypted account ID. Max length 56 characters."""
  accountId: String!
  activeMatch(game: Game!): Spectatorv4CurrentGameInfo
  championMastery: ChampionMastery!
  clash: Clashv1PlayerRegistration!

  """Encrypted summoner ID. Max length 63 characters."""
  id: String!
  matchList(filter: MatchListFilterInput, game: Game): MatchList!

  """Summoner name."""
  name: String!

  """ID of the summoner icon associated with the summoner."""
  profileIconId: Int!

  """Encrypted PUUID. Exact length of 78 characters."""
  puuid: String!
  rank(queue: AllRankedQueues!): Leaguev4LeagueEntry
  region: RegionInput!

  """
  Date summoner was last modified specified as epoch milliseconds. The following
  events will update this timestamp: summoner name change, summoner level
  change, or profile icon change.
  """
  revisionDate: Float!

  """Summoner level associated with the summoner."""
  summonerLevel: Float!
}

type Tftleaguev1LeagueEntry {
  freshBlood: Boolean!
  hotStreak: Boolean!
  inactive: Boolean!
  leagueId: String!
  leaguePoints: Int!

  """Second through eighth placement."""
  losses: Int!
  miniSeries: Tftleaguev1MiniSeries
  queueType: String!
  rank: String!

  """Player's encrypted summonerId."""
  summonerId: String!
  summonerName: String!
  tier: String!
  veteran: Boolean!

  """First placement."""
  wins: Int!
}

type Tftleaguev1LeagueItem {
  freshBlood: Boolean!
  hotStreak: Boolean!
  inactive: Boolean!
  leaguePoints: Int!

  """Second through eighth placement."""
  losses: Int!
  miniSeries: Tftleaguev1MiniSeries
  rank: String!

  """Player's encrypted summonerId."""
  summonerId: String!
  summonerName: String!
  veteran: Boolean!

  """First placement."""
  wins: Int!
}

type Tftleaguev1LeagueList {
  entries: [Tftleaguev1LeagueItem]!
  leagueId: String!
  name: String!
  queue: String!
  tier: String!
}

type Tftleaguev1MiniSeries {
  losses: Int!
  progress: String!
  target: Int!
  wins: Int!
}

"""TFT matchlist return type. Returns a list of match ids"""
type TFTMatchIdList {
  matches: [String!]!
}

type Tftmatchv1Companion {
  content_ID: String!
  skin_ID: Int!
  species: String!
}

type Tftmatchv1Info {
  """Unix timestamp."""
  game_datetime: Float!

  """Game length in seconds."""
  game_length: Float!

  """Game variation key. Game variations documented in TFT static data."""
  game_variation: String

  """Game client version."""
  game_version: String!

  """Participants."""
  participants: [Tftmatchv1Participant]!

  """Please refer to the League of Legends documentation."""
  queue_id: Int!

  """Teamfight Tactics set number."""
  tft_set_number: Int!
}

type Tftmatchv1Match {
  info: Tftmatchv1Info!
  metadata: Tftmatchv1Metadata!
}

type Tftmatchv1Metadata {
  """Match data version."""
  data_version: String!

  """Match id."""
  match_id: String!

  """A list of encrypted participant PUUIDs."""
  participants: [String]!
}

type Tftmatchv1Participant {
  companion: Tftmatchv1Companion!

  """Gold left after participant was eliminated."""
  gold_left: Int!

  """
  The round the participant was eliminated in. Note: If the player was eliminated in stage 2-1 their last_round would be 5.
  """
  last_round: Int!

  """
  Participant Little Legend level. Note: This is not the number of active units.
  """
  level: Int!

  """Participant placement upon elimination."""
  placement: Int!

  """Number of players the participant eliminated."""
  players_eliminated: Int!

  """Encrypted PUUID."""
  puuid: String!

  """The number of seconds before the participant was eliminated."""
  time_eliminated: Float!

  """Damage the participant dealt to other players."""
  total_damage_to_players: Int!

  """A complete list of traits for the participant's active units."""
  traits: [Tftmatchv1Trait]!

  """A list of active units for the participant."""
  units: [Tftmatchv1Unit]!
}

type Tftmatchv1Trait {
  """Trait name."""
  name: String!

  """Number of units with this trait."""
  num_units: Int!

  """Current active tier for the trait."""
  tier_current: Int!

  """Total tiers for the trait."""
  tier_total: Int
}

type Tftmatchv1Unit {
  """This field was introduced in patch 9.22 with data_version 2."""
  character_id: String!

  """
  A list of the unit's items. Please refer to the Teamfight Tactics documentation for item ids.
  """
  items: [Int]!

  """Unit name."""
  name: String!

  """Unit rarity. This doesn't equate to the unit cost."""
  rarity: Int!

  """Unit tier."""
  tier: Int!
}

"""represents a summoner"""
type Tftsummonerv1Summoner {
  """Encrypted account ID. Max length 56 characters."""
  accountId: String!

  """Encrypted summoner ID. Max length 63 characters."""
  id: String!

  """Summoner name."""
  name: String!

  """ID of the summoner icon associated with the summoner."""
  profileIconId: Int!

  """Encrypted PUUID. Exact length of 78 characters."""
  puuid: String!

  """
  Date summoner was last modified specified as epoch milliseconds. The following
  events will update this timestamp: summoner name change, summoner level
  change, or profile icon change.
  """
  revisionDate: Float!

  """Summoner level associated with the summoner."""
  summonerLevel: Float!
}

enum Tier {
  BRONZE
  CHALLENGER
  DIAMOND
  GOLD
  GRANDMASTER
  IRON
  MASTER
  PLATINUM
  SILVER
}

enum Tier2 {
  BRONZE
  DIAMOND
  GOLD
  IRON
  PLATINUM
  SILVER
}

enum Tier3 {
  BRONZE
  DIAMOND
  GOLD
  IRON
  PLATINUM
  SILVER
}

type TournamentStub {
  lobbyEvents: [Tournamentstubv4LobbyEvent!]!
}

type Tournamentstubv4LobbyEvent {
  """The type of event that was triggered"""
  eventType: String!

  """The summonerId that triggered the event (Encrypted)"""
  summonerId: String!

  """Timestamp from the event"""
  timestamp: String!
}

type Tournamentstubv4LobbyEventDTOWrapper {
  eventList: [Tournamentstubv4LobbyEvent]!
}

input Tournamentstubv4ProviderRegistrationParametersInput {
  """
  The region in which the provider will be running tournaments.
               (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
  """
  region: Region!

  """
  The provider's callback URL to which tournament game results in this region
  should be posted. The URL must be well-formed, use the http or https protocol,
  and use the default port for the protocol (http URLs must use port 80, https
  URLs must use port 443).
  """
  url: String!
}

input Tournamentstubv4TournamentCodeParametersInput {
  """
  Optional list of encrypted summonerIds in order to validate the players
  eligible to join the lobby. NOTE: We currently do not enforce participants at
  the team level, but rather the aggregate of teamOne and teamTwo. We may add
  the ability to enforce at the team level in the future.
  """
  allowedSummonerIds: [String]

  """
  The map type of the game.
               (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
  """
  mapType: MapType!

  """
  Optional string that may contain any data in any format, if specified at all.
  Used to denote any custom information about the game.
  """
  metadata: String

  """
  The pick type of the game.
               (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
  """
  pickType: PickType!

  """
  The spectator type of the game.
               (Legal values:  NONE,  LOBBYONLY,  ALL)
  """
  spectatorType: SpectatorType!

  """The team size of the game. Valid values are 1-5."""
  teamSize: Int!
}

input Tournamentstubv4TournamentRegistrationParametersInput {
  """The optional name of the tournament."""
  name: String

  """
  The provider ID to specify the regional registered provider data to associate this tournament.
  """
  providerId: Int!
}

type Tournamentv4LobbyEvent {
  """The type of event that was triggered"""
  eventType: String!

  """The summonerId that triggered the event (Encrypted)"""
  summonerId: String!

  """Timestamp from the event"""
  timestamp: String!
}

type Tournamentv4LobbyEventDTOWrapper {
  eventList: [Tournamentv4LobbyEvent]!
}

input Tournamentv4ProviderRegistrationParametersInput {
  """
  The region in which the provider will be running tournaments.
               (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
  """
  region: Region!

  """
  The provider's callback URL to which tournament game results in this region
  should be posted. The URL must be well-formed, use the http or https protocol,
  and use the default port for the protocol (http URLs must use port 80, https
  URLs must use port 443).
  """
  url: String!
}

type Tournamentv4TournamentCode {
  """The tournament code."""
  code: String!

  """The tournament code's ID."""
  id: Int!
  lobbyEvents: [Tournamentv4LobbyEvent!]!

  """The lobby name for the tournament code game."""
  lobbyName: String!

  """The game map for the tournament code game"""
  map: String!

  """The metadata for tournament code."""
  metaData: String!

  """The summonerIds of the participants (Encrypted)"""
  participants: [String]!

  """The password for the tournament code game."""
  password: String!

  """The pick mode for tournament code game."""
  pickType: String!

  """The provider's ID."""
  providerId: Int!

  """
  The tournament code's region.
               (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
  """
  region: Region2!

  """The spectator mode for the tournament code game."""
  spectators: String!

  """The team size for the tournament code game."""
  teamSize: Int!

  """The tournament's ID."""
  tournamentId: Int!
}

input Tournamentv4TournamentCodeParametersInput {
  """
  Optional list of encrypted summonerIds in order to validate the players
  eligible to join the lobby. NOTE: We currently do not enforce participants at
  the team level, but rather the aggregate of teamOne and teamTwo. We may add
  the ability to enforce at the team level in the future.
  """
  allowedSummonerIds: [String]

  """
  The map type of the game.
               (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
  """
  mapType: MapType!

  """
  Optional string that may contain any data in any format, if specified at all.
  Used to denote any custom information about the game.
  """
  metadata: String

  """
  The pick type of the game.
               (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
  """
  pickType: PickType!

  """
  The spectator type of the game.
               (Legal values:  NONE,  LOBBYONLY,  ALL)
  """
  spectatorType: SpectatorType!

  """The team size of the game. Valid values are 1-5."""
  teamSize: Int!
}

input Tournamentv4TournamentCodeUpdateParametersInput {
  """
  Optional list of encrypted summonerIds in order to validate the players
  eligible to join the lobby. NOTE: We currently do not enforce participants at
  the team level, but rather the aggregate of teamOne and teamTwo. We may add
  the ability to enforce at the team level in the future.
  """
  allowedSummonerIds: [String]

  """
  The map type
               (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
  """
  mapType: MapType2!

  """
  The pick type
               (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
  """
  pickType: PickType2!

  """
  The spectator type
               (Legal values:  NONE,  LOBBYONLY,  ALL)
  """
  spectatorType: SpectatorType2!
}

input Tournamentv4TournamentRegistrationParametersInput {
  """The optional name of the tournament."""
  name: String

  """
  The provider ID to specify the regional registered provider data to associate this tournament.
  """
  providerId: Int!
}

enum Type {
  ASCENDED_EVENT
  BUILDING_KILL
  CAPTURE_POINT
  CHAMPION_KILL
  ELITE_MONSTER_KILL
  ITEM_DESTROYED
  ITEM_PURCHASED
  ITEM_SOLD
  ITEM_UNDO
  PORO_KING_SUMMON
  SKILL_LEVEL_UP
  WARD_KILL
  WARD_PLACED
}

type Valcontentv1Content {
  characters: [Valcontentv1ContentItem]!
  charmLevels: [Valcontentv1ContentItem]!
  charms: [Valcontentv1ContentItem]!
  chromas: [Valcontentv1ContentItem]!
  equips: [Valcontentv1ContentItem]!
  gameModes: [Valcontentv1ContentItem]!
  maps: [Valcontentv1ContentItem]!
  playerCards: [Valcontentv1ContentItem]!
  playerTitles: [Valcontentv1ContentItem]!
  skinLevels: [Valcontentv1ContentItem]!
  skins: [Valcontentv1ContentItem]!
  sprayLevels: [Valcontentv1ContentItem]!
  sprays: [Valcontentv1ContentItem]!
  version: String!
}

type Valcontentv1ContentItem {
  assetName: String!
  localizedNames: Valcontentv1LocalizedNames
  name: String!
}

type Valcontentv1LocalizedNames {
  arAE: String!
  deDE: String!
  enGB: String!
  enUS: String!
  esES: String!
  esMX: String!
  frFR: String!
  idID: String!
  itIT: String!
  jaJP: String!
  koKR: String!
  plPL: String!
  ptBR: String!
  ruRU: String!
  thTH: String!
  trTR: String!
  viVN: String!
  zhCN: String!
  zhTW: String!
}

type Valmatchv1Ability {
  ability1Effects: String!
  ability2Effects: String!
  grenadeEffects: String!
  ultimateEffects: String!
}

type Valmatchv1Damage {
  bodyshots: Int!
  damage: Int!
  headshots: Int!
  legshots: Int!

  """PUUID"""
  receiver: String!
}

type Valmatchv1Economy {
  armor: String!
  loadoutValue: Int!
  remaining: Int!
  spent: Int!
  weapon: String!
}

type Valmatchv1FinishingDamage {
  damageItem: String!
  damageType: String!
  isSecondaryFireMode: Boolean!
}

type Valmatchv1Kill {
  """List of PUUIDs"""
  assistants: [String]!
  finishingDamage: Valmatchv1FinishingDamage!
  gameTime: Int!

  """PUUID"""
  killer: String!
  playerLocations: [Valmatchv1PlayerLocations]!
  roundTime: Int!

  """PUUID"""
  victim: String!
  victimLocation: Valmatchv1Location!
}

type Valmatchv1Location {
  x: Int!
  y: Int!
}

type Valmatchv1Match {
  matchInfo: [Valmatchv1MatchInfo]!
  players: [Valmatchv1Player]!
  roundResults: [Valmatchv1RoundResult]!
  teams: [Valmatchv1Team]!
}

type Valmatchv1MatchInfo {
  customGameName: String!
  gameLengthMillis: Int!
  gameMode: String!
  gameStartMillis: Float!
  isCompleted: Boolean!
  isRanked: Boolean!
  mapId: String!
  matchId: String!
  provisioningFlowId: String!
  queueId: String!
  seasonId: String!
}

type Valmatchv1Matchlist {
  history: [Valmatchv1MatchReference]!
  puuid: String!
}

type Valmatchv1MatchReference {
  gameStartTime: Float!
  matchId: String!
  teamId: String!
}

type Valmatchv1Player {
  characterId: String!
  competitiveTier: Int!
  partyId: String!
  playerCard: String!
  playerTitle: String!
  puuid: String!
  stats: Valmatchv1PlayerStats!
  teamId: String!
}

type Valmatchv1PlayerLocations {
  location: Valmatchv1Location!
  puuid: String!
  viewRadians: Float!
}

type Valmatchv1PlayerStats {
  ability: Valmatchv1Ability!
  damage: [Valmatchv1Damage]!
  economy: Valmatchv1Economy!
  kills: [Valmatchv1Kill]!
  puuid: String!
  score: Int!
}

type Valmatchv1RoundResult {
  """PUUID of player"""
  bombDefuser: String!

  """PUUID of player"""
  bombPlanter: String!
  defuseLocation: Valmatchv1Location!
  defusePlayerLocations: [Valmatchv1PlayerLocations]!
  defuseRoundTime: Int!
  plantLocation: Valmatchv1Location!
  plantPlayerLocations: [Valmatchv1PlayerLocations]!
  plantRoundTime: Int!
  plantSite: String!
  playerStats: [Valmatchv1PlayerStats]!
  roundCeremony: String!
  roundNum: Int!
  roundResult: String!
  roundResultCode: String!
  winningTeam: String!
}

type Valmatchv1Team {
  roundsPlayed: Int!
  roundsWon: Int!
  teamId: String!
  won: Boolean!
}

enum Win {
  FAIL
  WIN
}
