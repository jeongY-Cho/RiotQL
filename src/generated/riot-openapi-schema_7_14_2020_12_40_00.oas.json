{
  "openapi": "3.0.0",
  "info": {
    "title": "Riot API",
    "description": "\nOpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily.\n## Download OpenAPI Spec File\nThe following versions of the Riot API spec file are available:\n- `openapi-3.0.0.json` ([view file](../openapi-3.0.0.json), [ui select](?url=../openapi-3.0.0.json))\n- `openapi-3.0.0.min.json` ([view file](../openapi-3.0.0.min.json), [ui select](?url=../openapi-3.0.0.min.json))\n- `openapi-3.0.0.yml` ([view file](../openapi-3.0.0.yml), [ui select](?url=../openapi-3.0.0.yml))\n- `openapi-3.0.0.min.yml` ([view file](../openapi-3.0.0.min.yml), [ui select](?url=../openapi-3.0.0.min.yml))\n- `swaggerspec-2.0.json` ([view file](../swaggerspec-2.0.json), [ui select](?url=../swaggerspec-2.0.json))\n- `swaggerspec-2.0.min.json` ([view file](../swaggerspec-2.0.min.json), [ui select](?url=../swaggerspec-2.0.min.json))\n- `swaggerspec-2.0.yml` ([view file](../swaggerspec-2.0.yml), [ui select](?url=../swaggerspec-2.0.yml))\n- `swaggerspec-2.0.min.yml` ([view file](../swaggerspec-2.0.min.yml), [ui select](?url=../swaggerspec-2.0.min.yml))\n## Source Code\nSource code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome!\n## Automatically Generated\nRebuilt on [Travis CI](https://travis-ci.com/MingweiSamuel/riotapi-schema/builds) daily.\n***\n",
    "termsOfService": "https://developer.riotgames.com/terms-and-conditions.html",
    "version": "ce249d47e5205e2141923e8dade20ac0ac4fc33c"
  },
  "servers": [
    {
      "url": "https://{platform}.api.riotgames.com",
      "variables": {
        "platform": {
          "enum": [
            "americas",
            "asia",
            "europe",
            "br1",
            "eun1",
            "euw1",
            "jp1",
            "kr",
            "la1",
            "la2",
            "na1",
            "oc1",
            "ru",
            "tr1",
            "pbe1",
            "sea",
            "ap",
            "br",
            "eu",
            "latam",
            "na"
          ],
          "default": "americas"
        }
      }
    }
  ],
  "paths": {
    "/riot/account/v1/accounts/by-puuid/{puuid}": {
      "get": {
        "tags": [
          "account-v1"
        ],
        "summary": "Get account by puuid",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#account-v1/GET_getByPuuid"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account-v1.AccountDto",
                  "x-type": "AccountDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "account-v1.getByPuuid",
        "description": "Get account by puuid",
        "parameters": [
          {
            "name": "puuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            }
          }
        ]
      },
      "x-endpoint": "account-v1",
      "x-platforms-available": [
        "americas",
        "asia",
        "europe"
      ]
    },
    "/riot/account/v1/accounts/by-riot-id/{gameName}/{tagLine}": {
      "get": {
        "tags": [
          "account-v1"
        ],
        "summary": "Get account by riot id",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#account-v1/GET_getByRiotId"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "x-type": "String"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "account-v1.getByRiotId",
        "description": "Get account by riot id",
        "parameters": [
          {
            "name": "tagLine",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            }
          },
          {
            "name": "gameName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            }
          }
        ]
      },
      "x-endpoint": "account-v1",
      "x-platforms-available": [
        "americas",
        "asia",
        "europe"
      ]
    },
    "/riot/account/v1/active-shards/by-game/{game}/by-puuid/{puuid}": {
      "get": {
        "tags": [
          "account-v1"
        ],
        "summary": "Get active shard for a player",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#account-v1/GET_getActiveShard"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account-v1.ActiveShardDto",
                  "x-type": "ActiveShardDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "account-v1.getActiveShard",
        "description": "Get active shard for a player",
        "parameters": [
          {
            "name": "puuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            }
          },
          {
            "name": "game",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "val",
                "lor"
              ]
            }
          }
        ]
      },
      "x-endpoint": "account-v1",
      "x-platforms-available": [
        "americas",
        "asia",
        "europe"
      ]
    },
    "/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}": {
      "get": {
        "tags": [
          "champion-mastery-v4"
        ],
        "summary": "Get all champion mastery entries sorted by number of champion points descending,",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/champion-mastery-v4.ChampionMasteryDTO",
                    "x-type": "ChampionMasteryDTO"
                  },
                  "x-type": "List[ChampionMasteryDTO]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "champion-mastery-v4.getAllChampionMasteries",
        "description": "Get all champion mastery entries sorted by number of champion points descending,",
        "parameters": [
          {
            "name": "encryptedSummonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Summoner ID associated with the player"
          }
        ]
      },
      "x-endpoint": "champion-mastery-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}/by-champion/{championId}": {
      "get": {
        "tags": [
          "champion-mastery-v4"
        ],
        "summary": "Get a champion mastery by player ID and champion ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/champion-mastery-v4.ChampionMasteryDTO",
                  "x-type": "ChampionMasteryDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "champion-mastery-v4.getChampionMastery",
        "x-nullable-404": true,
        "description": "Get a champion mastery by player ID and champion ID.",
        "parameters": [
          {
            "name": "championId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long",
              "x-enum": "champion"
            },
            "description": "Champion ID to retrieve Champion Mastery for"
          },
          {
            "name": "encryptedSummonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Summoner ID associated with the player"
          }
        ]
      },
      "x-endpoint": "champion-mastery-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/champion-mastery/v4/scores/by-summoner/{encryptedSummonerId}": {
      "get": {
        "tags": [
          "champion-mastery-v4"
        ],
        "summary": "Get a player's total champion mastery score, which is the sum of individual champion mastery levels.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "x-type": "int"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "champion-mastery-v4.getChampionMasteryScore",
        "description": "Get a player's total champion mastery score, which is the sum of individual champion mastery levels.",
        "parameters": [
          {
            "name": "encryptedSummonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Summoner ID associated with the player"
          }
        ]
      },
      "x-endpoint": "champion-mastery-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/platform/v3/champion-rotations": {
      "get": {
        "tags": [
          "champion-v3"
        ],
        "summary": "Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/champion-v3.ChampionInfo",
                  "x-type": "ChampionInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "champion-v3.getChampionInfo",
        "description": "Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)"
      },
      "x-endpoint": "champion-v3",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/clash/v1/players/by-summoner/{summonerId}": {
      "get": {
        "tags": [
          "clash-v1"
        ],
        "summary": "Get players by summoner ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#clash-v1/GET_getPlayersBySummoner"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/clash-v1.PlayerDto",
                    "x-type": "PlayerDto"
                  },
                  "x-type": "List[PlayerDto]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "clash-v1.getPlayersBySummoner",
        "description": "Get players by summoner ID.\n## Implementation Notes\nThis endpoint returns a list of active Clash players for a given summoner ID. If a summoner registers for multiple tournaments at the same time (e.g., Saturday and Sunday) then both registrations would appear in this list.",
        "parameters": [
          {
            "name": "summonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            }
          }
        ]
      },
      "x-endpoint": "clash-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/clash/v1/teams/{teamId}": {
      "get": {
        "tags": [
          "clash-v1"
        ],
        "summary": "Get team by ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#clash-v1/GET_getTeamById"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clash-v1.TeamDto",
                  "x-type": "TeamDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "clash-v1.getTeamById",
        "x-nullable-404": true,
        "description": "Get team by ID.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            }
          }
        ]
      },
      "x-endpoint": "clash-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/clash/v1/tournaments": {
      "get": {
        "tags": [
          "clash-v1"
        ],
        "summary": "Get all active or upcoming tournaments.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournaments"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/clash-v1.TournamentDto",
                    "x-type": "TournamentDto"
                  },
                  "x-type": "List[TournamentDto]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "clash-v1.getTournaments",
        "description": "Get all active or upcoming tournaments."
      },
      "x-endpoint": "clash-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/clash/v1/tournaments/by-team/{teamId}": {
      "get": {
        "tags": [
          "clash-v1"
        ],
        "summary": "Get tournament by team ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentByTeam"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clash-v1.TournamentDto",
                  "x-type": "TournamentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "clash-v1.getTournamentByTeam",
        "x-nullable-404": true,
        "description": "Get tournament by team ID.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            }
          }
        ]
      },
      "x-endpoint": "clash-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/clash/v1/tournaments/{tournamentId}": {
      "get": {
        "tags": [
          "clash-v1"
        ],
        "summary": "Get tournament by ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#clash-v1/GET_getTournamentById"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clash-v1.TournamentDto",
                  "x-type": "TournamentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "clash-v1.getTournamentById",
        "x-nullable-404": true,
        "description": "Get tournament by ID.",
        "parameters": [
          {
            "name": "tournamentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            }
          }
        ]
      },
      "x-endpoint": "clash-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/league-exp/v4/entries/{queue}/{tier}/{division}": {
      "get": {
        "tags": [
          "league-exp-v4"
        ],
        "summary": "Get all the league entries.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/league-exp-v4.LeagueEntryDTO",
                    "x-type": "LeagueEntryDTO"
                  },
                  "x-type": "Set[LeagueEntryDTO]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "league-exp-v4.getLeagueEntries",
        "description": "Get all the league entries.",
        "parameters": [
          {
            "name": "queue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "x-enum": "queueType",
              "enum": [
                "RANKED_SOLO_5x5",
                "RANKED_TFT",
                "RANKED_FLEX_SR",
                "RANKED_FLEX_TT"
              ]
            },
            "description": "Note that the queue value must be a valid ranked queue."
          },
          {
            "name": "tier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "x-enum": "tier",
              "enum": [
                "CHALLENGER",
                "GRANDMASTER",
                "MASTER",
                "DIAMOND",
                "PLATINUM",
                "GOLD",
                "SILVER",
                "BRONZE",
                "IRON"
              ]
            }
          },
          {
            "name": "division",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "x-enum": "division",
              "enum": [
                "I",
                "II",
                "III",
                "IV"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "Starts with page 1."
          }
        ]
      },
      "x-endpoint": "league-exp-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/league/v4/challengerleagues/by-queue/{queue}": {
      "get": {
        "tags": [
          "league-v4"
        ],
        "summary": "Get the challenger league for given queue.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/league-v4.LeagueListDTO",
                  "x-type": "LeagueListDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "league-v4.getChallengerLeague",
        "description": "Get the challenger league for given queue.",
        "parameters": [
          {
            "name": "queue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "x-enum": "queueType",
              "enum": [
                "RANKED_SOLO_5x5",
                "RANKED_FLEX_SR",
                "RANKED_FLEX_TT"
              ]
            }
          }
        ]
      },
      "x-endpoint": "league-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/league/v4/entries/by-summoner/{encryptedSummonerId}": {
      "get": {
        "tags": [
          "league-v4"
        ],
        "summary": "Get league entries in all queues for a given summoner ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/league-v4.LeagueEntryDTO",
                    "x-type": "LeagueEntryDTO"
                  },
                  "x-type": "Set[LeagueEntryDTO]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "league-v4.getLeagueEntriesForSummoner",
        "description": "Get league entries in all queues for a given summoner ID.",
        "parameters": [
          {
            "name": "encryptedSummonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            }
          }
        ]
      },
      "x-endpoint": "league-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/league/v4/entries/{queue}/{tier}/{division}": {
      "get": {
        "tags": [
          "league-v4"
        ],
        "summary": "Get all the league entries.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/league-v4.LeagueEntryDTO",
                    "x-type": "LeagueEntryDTO"
                  },
                  "x-type": "Set[LeagueEntryDTO]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "league-v4.getLeagueEntries",
        "description": "Get all the league entries.",
        "parameters": [
          {
            "name": "division",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "x-enum": "division",
              "enum": [
                "I",
                "II",
                "III",
                "IV"
              ]
            }
          },
          {
            "name": "tier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "x-enum": "tier",
              "enum": [
                "DIAMOND",
                "PLATINUM",
                "GOLD",
                "SILVER",
                "BRONZE",
                "IRON"
              ]
            }
          },
          {
            "name": "queue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "x-enum": "queueType",
              "enum": [
                "RANKED_SOLO_5x5",
                "RANKED_FLEX_SR",
                "RANKED_FLEX_TT"
              ]
            },
            "description": "Note that the queue value must be a valid ranked queue."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "Starts with page 1."
          }
        ]
      },
      "x-endpoint": "league-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/league/v4/grandmasterleagues/by-queue/{queue}": {
      "get": {
        "tags": [
          "league-v4"
        ],
        "summary": "Get the grandmaster league of a specific queue.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/league-v4.LeagueListDTO",
                  "x-type": "LeagueListDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "league-v4.getGrandmasterLeague",
        "description": "Get the grandmaster league of a specific queue.",
        "parameters": [
          {
            "name": "queue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "x-enum": "queueType",
              "enum": [
                "RANKED_SOLO_5x5",
                "RANKED_FLEX_SR",
                "RANKED_FLEX_TT"
              ]
            }
          }
        ]
      },
      "x-endpoint": "league-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/league/v4/leagues/{leagueId}": {
      "get": {
        "tags": [
          "league-v4"
        ],
        "summary": "Get league with given ID, including inactive entries.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/league-v4.LeagueListDTO",
                  "x-type": "LeagueListDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "league-v4.getLeagueById",
        "x-nullable-404": true,
        "description": "Get league with given ID, including inactive entries.",
        "parameters": [
          {
            "name": "leagueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The UUID of the league."
          }
        ]
      },
      "x-endpoint": "league-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/league/v4/masterleagues/by-queue/{queue}": {
      "get": {
        "tags": [
          "league-v4"
        ],
        "summary": "Get the master league for given queue.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/league-v4.LeagueListDTO",
                  "x-type": "LeagueListDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "league-v4.getMasterLeague",
        "description": "Get the master league for given queue.",
        "parameters": [
          {
            "name": "queue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "x-enum": "queueType",
              "enum": [
                "RANKED_SOLO_5x5",
                "RANKED_FLEX_SR",
                "RANKED_FLEX_TT"
              ]
            }
          }
        ]
      },
      "x-endpoint": "league-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/status/v3/shard-data": {
      "get": {
        "tags": [
          "lol-status-v3"
        ],
        "summary": "Get League of Legends status for the given shard.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lol-status-v3.ShardStatus",
                  "x-type": "ShardStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lol-status-v3.getShardData",
        "x-app-rate-limit-excluded": true,
        "description": "Get League of Legends status for the given shard.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits."
      },
      "x-endpoint": "lol-status-v3",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "pbe1",
        "ru",
        "tr1"
      ]
    },
    "/lor/ranked/v1/leaderboards": {
      "get": {
        "tags": [
          "lor-ranked-v1"
        ],
        "summary": "Get the players in Master tier.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#lor-ranked-v1/GET_getLeaderboards"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lor-ranked-v1.LeaderboardDto",
                  "x-type": "LeaderboardDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "lor-ranked-v1.getLeaderboards",
        "description": "Get the players in Master tier."
      },
      "x-endpoint": "lor-ranked-v1",
      "x-platforms-available": [
        "americas",
        "asia",
        "europe",
        "sea"
      ]
    },
    "/lol/match/v4/matches/by-tournament-code/{tournamentCode}/ids": {
      "get": {
        "tags": [
          "match-v4"
        ],
        "summary": "Get match IDs by tournament code.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchIdsByTournamentCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64",
                    "x-type": "long"
                  },
                  "x-type": "List[long]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "match-v4.getMatchIdsByTournamentCode",
        "description": "Get match IDs by tournament code.",
        "parameters": [
          {
            "name": "tournamentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The tournament code."
          }
        ]
      },
      "x-endpoint": "match-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/match/v4/matches/{matchId}": {
      "get": {
        "tags": [
          "match-v4"
        ],
        "summary": "Get match by match ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#match-v4/GET_getMatch"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/match-v4.MatchDto",
                  "x-type": "MatchDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "match-v4.getMatch",
        "x-nullable-404": true,
        "description": "Get match by match ID.",
        "parameters": [
          {
            "name": "matchId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The match ID."
          }
        ]
      },
      "x-endpoint": "match-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/match/v4/matches/{matchId}/by-tournament-code/{tournamentCode}": {
      "get": {
        "tags": [
          "match-v4"
        ],
        "summary": "Get match by match ID and tournament code.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchByTournamentCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/match-v4.MatchDto",
                  "x-type": "MatchDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "match-v4.getMatchByTournamentCode",
        "description": "Get match by match ID and tournament code.",
        "parameters": [
          {
            "name": "tournamentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The tournament code."
          },
          {
            "name": "matchId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The match ID."
          }
        ]
      },
      "x-endpoint": "match-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/match/v4/matchlists/by-account/{encryptedAccountId}": {
      "get": {
        "tags": [
          "match-v4"
        ],
        "summary": "Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchlist"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/match-v4.MatchlistDto",
                  "x-type": "MatchlistDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "match-v4.getMatchlist",
        "x-nullable-404": true,
        "description": "Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.\n## Implementation Notes\nA number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.\n\nIf beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.\n\nIf beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.",
        "parameters": [
          {
            "name": "encryptedAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The account ID."
          },
          {
            "name": "champion",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32",
                "x-type": "int",
                "x-enum": "champion"
              },
              "x-type": "Set[int]"
            },
            "description": "Set of champion IDs for filtering the matchlist.",
            "explode": true
          },
          {
            "name": "queue",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32",
                "x-type": "int",
                "x-enum": "queue"
              },
              "x-type": "Set[int]"
            },
            "description": "Set of queue IDs for filtering the matchlist.",
            "explode": true
          },
          {
            "name": "season",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32",
                "x-type": "int",
                "x-enum": "season"
              },
              "x-type": "Set[int]"
            },
            "description": "[DEPRECATED] This field should not be considered reliable for the purposes of filtering matches by season.",
            "explode": true
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The end time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned."
          },
          {
            "name": "beginTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The begin time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned."
          },
          {
            "name": "endIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "The end index to use for filtering matchlist. If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned."
          },
          {
            "name": "beginIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "The begin index to use for filtering matchlist.  If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned."
          }
        ]
      },
      "x-endpoint": "match-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/match/v4/timelines/by-match/{matchId}": {
      "get": {
        "tags": [
          "match-v4"
        ],
        "summary": "Get match timeline by match ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchTimeline"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/match-v4.MatchTimelineDto",
                  "x-type": "MatchTimelineDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "match-v4.getMatchTimeline",
        "x-nullable-404": true,
        "description": "Get match timeline by match ID.\n## Implementation Notes\nNot all matches have timeline data.",
        "parameters": [
          {
            "name": "matchId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The match ID."
          }
        ]
      },
      "x-endpoint": "match-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/spectator/v4/active-games/by-summoner/{encryptedSummonerId}": {
      "get": {
        "tags": [
          "spectator-v4"
        ],
        "summary": "Get current game information for the given summoner ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spectator-v4.CurrentGameInfo",
                  "x-type": "CurrentGameInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "spectator-v4.getCurrentGameInfoBySummoner",
        "x-nullable-404": true,
        "description": "Get current game information for the given summoner ID.",
        "parameters": [
          {
            "name": "encryptedSummonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The ID of the summoner."
          }
        ]
      },
      "x-endpoint": "spectator-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/spectator/v4/featured-games": {
      "get": {
        "tags": [
          "spectator-v4"
        ],
        "summary": "Get list of featured games.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spectator-v4.FeaturedGames",
                  "x-type": "FeaturedGames"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "spectator-v4.getFeaturedGames",
        "description": "Get list of featured games."
      },
      "x-endpoint": "spectator-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/summoner/v4/summoners/by-account/{encryptedAccountId}": {
      "get": {
        "tags": [
          "summoner-v4"
        ],
        "summary": "Get a summoner by account ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/summoner-v4.SummonerDTO",
                  "x-type": "SummonerDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "summoner-v4.getByAccountId",
        "description": "Get a summoner by account ID.",
        "parameters": [
          {
            "name": "encryptedAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            }
          }
        ]
      },
      "x-endpoint": "summoner-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/summoner/v4/summoners/by-name/{summonerName}": {
      "get": {
        "tags": [
          "summoner-v4"
        ],
        "summary": "Get a summoner by summoner name.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/summoner-v4.SummonerDTO",
                  "x-type": "SummonerDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "summoner-v4.getBySummonerName",
        "x-nullable-404": true,
        "description": "Get a summoner by summoner name.",
        "parameters": [
          {
            "name": "summonerName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Summoner Name"
          }
        ]
      },
      "x-endpoint": "summoner-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}": {
      "get": {
        "tags": [
          "summoner-v4"
        ],
        "summary": "Get a summoner by PUUID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/summoner-v4.SummonerDTO",
                  "x-type": "SummonerDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "summoner-v4.getByPUUID",
        "description": "Get a summoner by PUUID.",
        "parameters": [
          {
            "name": "encryptedPUUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Summoner ID"
          }
        ]
      },
      "x-endpoint": "summoner-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/summoner/v4/summoners/{encryptedSummonerId}": {
      "get": {
        "tags": [
          "summoner-v4"
        ],
        "summary": "Get a summoner by summoner ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/summoner-v4.SummonerDTO",
                  "x-type": "SummonerDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "summoner-v4.getBySummonerId",
        "description": "Get a summoner by summoner ID.",
        "parameters": [
          {
            "name": "encryptedSummonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Summoner ID"
          }
        ]
      },
      "x-endpoint": "summoner-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/tft/league/v1/challenger": {
      "get": {
        "tags": [
          "tft-league-v1"
        ],
        "summary": "Get the challenger league.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tft-league-v1.LeagueListDTO",
                  "x-type": "LeagueListDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tft-league-v1.getChallengerLeague",
        "description": "Get the challenger league."
      },
      "x-endpoint": "tft-league-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/tft/league/v1/entries/by-summoner/{encryptedSummonerId}": {
      "get": {
        "tags": [
          "tft-league-v1"
        ],
        "summary": "Get league entries for a given summoner ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tft-league-v1.LeagueEntryDTO",
                    "x-type": "LeagueEntryDTO"
                  },
                  "x-type": "Set[LeagueEntryDTO]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tft-league-v1.getLeagueEntriesForSummoner",
        "description": "Get league entries for a given summoner ID.",
        "parameters": [
          {
            "name": "encryptedSummonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            }
          }
        ]
      },
      "x-endpoint": "tft-league-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/tft/league/v1/entries/{tier}/{division}": {
      "get": {
        "tags": [
          "tft-league-v1"
        ],
        "summary": "Get all the league entries.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tft-league-v1.LeagueEntryDTO",
                    "x-type": "LeagueEntryDTO"
                  },
                  "x-type": "Set[LeagueEntryDTO]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tft-league-v1.getLeagueEntries",
        "description": "Get all the league entries.",
        "parameters": [
          {
            "name": "tier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "DIAMOND",
                "PLATINUM",
                "GOLD",
                "SILVER",
                "BRONZE",
                "IRON"
              ]
            }
          },
          {
            "name": "division",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string",
              "enum": [
                "I",
                "II",
                "III",
                "IV"
              ]
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "Starts with page 1."
          }
        ]
      },
      "x-endpoint": "tft-league-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/tft/league/v1/grandmaster": {
      "get": {
        "tags": [
          "tft-league-v1"
        ],
        "summary": "Get the grandmaster league.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tft-league-v1.LeagueListDTO",
                  "x-type": "LeagueListDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tft-league-v1.getGrandmasterLeague",
        "description": "Get the grandmaster league."
      },
      "x-endpoint": "tft-league-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/tft/league/v1/leagues/{leagueId}": {
      "get": {
        "tags": [
          "tft-league-v1"
        ],
        "summary": "Get league with given ID, including inactive entries.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tft-league-v1.LeagueListDTO",
                  "x-type": "LeagueListDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tft-league-v1.getLeagueById",
        "x-nullable-404": true,
        "description": "Get league with given ID, including inactive entries.",
        "parameters": [
          {
            "name": "leagueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The UUID of the league."
          }
        ]
      },
      "x-endpoint": "tft-league-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/tft/league/v1/master": {
      "get": {
        "tags": [
          "tft-league-v1"
        ],
        "summary": "Get the master league.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tft-league-v1.LeagueListDTO",
                  "x-type": "LeagueListDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tft-league-v1.getMasterLeague",
        "description": "Get the master league."
      },
      "x-endpoint": "tft-league-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/tft/match/v1/matches/by-puuid/{puuid}/ids": {
      "get": {
        "tags": [
          "tft-match-v1"
        ],
        "summary": "Get a list of match ids by PUUID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-type": "string"
                  },
                  "x-type": "List[string]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tft-match-v1.getMatchIdsByPUUID",
        "description": "Get a list of match ids by PUUID.",
        "parameters": [
          {
            "name": "puuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "String"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            }
          }
        ]
      },
      "x-endpoint": "tft-match-v1",
      "x-platforms-available": [
        "americas",
        "asia",
        "europe"
      ]
    },
    "/tft/match/v1/matches/{matchId}": {
      "get": {
        "tags": [
          "tft-match-v1"
        ],
        "summary": "Get a match by match id.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tft-match-v1.MatchDto",
                  "x-type": "MatchDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tft-match-v1.getMatch",
        "x-nullable-404": true,
        "description": "Get a match by match id.",
        "parameters": [
          {
            "name": "matchId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "String"
            }
          }
        ]
      },
      "x-endpoint": "tft-match-v1",
      "x-platforms-available": [
        "americas",
        "asia",
        "europe"
      ]
    },
    "/tft/summoner/v1/summoners/by-account/{encryptedAccountId}": {
      "get": {
        "tags": [
          "tft-summoner-v1"
        ],
        "summary": "Get a summoner by account ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tft-summoner-v1.SummonerDTO",
                  "x-type": "SummonerDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tft-summoner-v1.getByAccountId",
        "description": "Get a summoner by account ID.",
        "parameters": [
          {
            "name": "encryptedAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            }
          }
        ]
      },
      "x-endpoint": "tft-summoner-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/tft/summoner/v1/summoners/by-name/{summonerName}": {
      "get": {
        "tags": [
          "tft-summoner-v1"
        ],
        "summary": "Get a summoner by summoner name.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tft-summoner-v1.SummonerDTO",
                  "x-type": "SummonerDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tft-summoner-v1.getBySummonerName",
        "x-nullable-404": true,
        "description": "Get a summoner by summoner name.",
        "parameters": [
          {
            "name": "summonerName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Summoner Name"
          }
        ]
      },
      "x-endpoint": "tft-summoner-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/tft/summoner/v1/summoners/by-puuid/{encryptedPUUID}": {
      "get": {
        "tags": [
          "tft-summoner-v1"
        ],
        "summary": "Get a summoner by PUUID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tft-summoner-v1.SummonerDTO",
                  "x-type": "SummonerDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tft-summoner-v1.getByPUUID",
        "description": "Get a summoner by PUUID.",
        "parameters": [
          {
            "name": "encryptedPUUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Summoner ID"
          }
        ]
      },
      "x-endpoint": "tft-summoner-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/tft/summoner/v1/summoners/{encryptedSummonerId}": {
      "get": {
        "tags": [
          "tft-summoner-v1"
        ],
        "summary": "Get a summoner by summoner ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tft-summoner-v1.SummonerDTO",
                  "x-type": "SummonerDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tft-summoner-v1.getBySummonerId",
        "description": "Get a summoner by summoner ID.",
        "parameters": [
          {
            "name": "encryptedSummonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "Summoner ID"
          }
        ]
      },
      "x-endpoint": "tft-summoner-v1",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/platform/v4/third-party-code/by-summoner/{encryptedSummonerId}": {
      "get": {
        "tags": [
          "third-party-code-v4"
        ],
        "summary": "Get third party code for a given summoner ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#third-party-code-v4/GET_getThirdPartyCodeBySummonerId"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "x-type": "String"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "third-party-code-v4.getThirdPartyCodeBySummonerId",
        "description": "Get third party code for a given summoner ID.",
        "parameters": [
          {
            "name": "encryptedSummonerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            }
          }
        ]
      },
      "x-endpoint": "third-party-code-v4",
      "x-platforms-available": [
        "br1",
        "eun1",
        "euw1",
        "jp1",
        "kr",
        "la1",
        "la2",
        "na1",
        "oc1",
        "ru",
        "tr1"
      ]
    },
    "/lol/tournament-stub/v4/codes": {
      "post": {
        "tags": [
          "tournament-stub-v4"
        ],
        "summary": "Create a mock tournament code for the given tournament.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_createTournamentCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-type": "string"
                  },
                  "x-type": "List[string]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-stub-v4.createTournamentCode",
        "description": "Create a mock tournament code for the given tournament.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-stub-v4.TournamentCodeParameters",
                "x-type": "TournamentCodeParameters"
              }
            }
          },
          "required": true,
          "description": "Metadata for the generated code"
        },
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "The number of codes to create (max 1000)"
          },
          {
            "name": "tournamentId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The tournament ID"
          }
        ]
      },
      "x-endpoint": "tournament-stub-v4",
      "x-platforms-available": [
        "americas"
      ]
    },
    "/lol/tournament-stub/v4/lobby-events/by-code/{tournamentCode}": {
      "get": {
        "tags": [
          "tournament-stub-v4"
        ],
        "summary": "Gets a mock list of lobby events by tournament code.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tournament-stub-v4.LobbyEventDTOWrapper",
                  "x-type": "LobbyEventDTOWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-stub-v4.getLobbyEventsByCode",
        "description": "Gets a mock list of lobby events by tournament code.",
        "parameters": [
          {
            "name": "tournamentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The short code to look up lobby events for"
          }
        ]
      },
      "x-endpoint": "tournament-stub-v4",
      "x-platforms-available": [
        "americas"
      ]
    },
    "/lol/tournament-stub/v4/providers": {
      "post": {
        "tags": [
          "tournament-stub-v4"
        ],
        "summary": "Creates a mock tournament provider and returns its ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerProviderData"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "x-type": "int"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-stub-v4.registerProviderData",
        "description": "Creates a mock tournament provider and returns its ID.\n## Implementation Notes\nProviders will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-stub-v4.ProviderRegistrationParameters",
                "x-type": "ProviderRegistrationParameters"
              }
            }
          },
          "required": true,
          "description": "The provider definition."
        }
      },
      "x-endpoint": "tournament-stub-v4",
      "x-platforms-available": [
        "americas"
      ]
    },
    "/lol/tournament-stub/v4/tournaments": {
      "post": {
        "tags": [
          "tournament-stub-v4"
        ],
        "summary": "Creates a mock tournament and returns its ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerTournament"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "x-type": "int"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-stub-v4.registerTournament",
        "description": "Creates a mock tournament and returns its ID.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-stub-v4.TournamentRegistrationParameters",
                "x-type": "TournamentRegistrationParameters"
              }
            }
          },
          "required": true,
          "description": "The tournament definition."
        }
      },
      "x-endpoint": "tournament-stub-v4",
      "x-platforms-available": [
        "americas"
      ]
    },
    "/lol/tournament/v4/codes": {
      "post": {
        "tags": [
          "tournament-v4"
        ],
        "summary": "Create a tournament code for the given tournament.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-v4/POST_createTournamentCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "x-type": "string"
                  },
                  "x-type": "List[string]"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-v4.createTournamentCode",
        "description": "Create a tournament code for the given tournament.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-v4.TournamentCodeParameters",
                "x-type": "TournamentCodeParameters"
              }
            }
          },
          "required": true,
          "description": "Metadata for the generated code"
        },
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "description": "The number of codes to create (max 1000)"
          },
          {
            "name": "tournamentId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "description": "The tournament ID"
          }
        ]
      },
      "x-endpoint": "tournament-v4",
      "x-platforms-available": [
        "americas"
      ]
    },
    "/lol/tournament/v4/codes/{tournamentCode}": {
      "get": {
        "tags": [
          "tournament-v4"
        ],
        "summary": "Returns the tournament code DTO associated with a tournament code string.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tournament-v4.TournamentCodeDTO",
                  "x-type": "TournamentCodeDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-v4.getTournamentCode",
        "description": "Returns the tournament code DTO associated with a tournament code string.",
        "parameters": [
          {
            "name": "tournamentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The tournament code string."
          }
        ]
      },
      "x-endpoint": "tournament-v4",
      "x-platforms-available": [
        "americas"
      ],
      "put": {
        "tags": [
          "tournament-v4"
        ],
        "summary": "Update the pick type, map, spectator type, or allowed summoners for a code.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-v4/PUT_updateCode"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-v4.updateCode",
        "description": "Update the pick type, map, spectator type, or allowed summoners for a code.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-v4.TournamentCodeUpdateParameters",
                "x-type": "TournamentCodeUpdateParameters"
              }
            }
          },
          "required": false,
          "description": "The fields to update"
        },
        "parameters": [
          {
            "name": "tournamentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The tournament code to update"
          }
        ]
      }
    },
    "/lol/tournament/v4/lobby-events/by-code/{tournamentCode}": {
      "get": {
        "tags": [
          "tournament-v4"
        ],
        "summary": "Gets a list of lobby events by tournament code.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tournament-v4.LobbyEventDTOWrapper",
                  "x-type": "LobbyEventDTOWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-v4.getLobbyEventsByCode",
        "description": "Gets a list of lobby events by tournament code.",
        "parameters": [
          {
            "name": "tournamentCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "string"
            },
            "description": "The short code to look up lobby events for"
          }
        ]
      },
      "x-endpoint": "tournament-v4",
      "x-platforms-available": [
        "americas"
      ]
    },
    "/lol/tournament/v4/providers": {
      "post": {
        "tags": [
          "tournament-v4"
        ],
        "summary": "Creates a tournament provider and returns its ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerProviderData"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "x-type": "int"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-v4.registerProviderData",
        "description": "Creates a tournament provider and returns its ID.\n## Implementation Notes\nProviders will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-v4.ProviderRegistrationParameters",
                "x-type": "ProviderRegistrationParameters"
              }
            }
          },
          "required": true,
          "description": "The provider definition."
        }
      },
      "x-endpoint": "tournament-v4",
      "x-platforms-available": [
        "americas"
      ]
    },
    "/lol/tournament/v4/tournaments": {
      "post": {
        "tags": [
          "tournament-v4"
        ],
        "summary": "Creates a tournament and returns its ID.",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerTournament"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "x-type": "int"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "tournament-v4.registerTournament",
        "description": "Creates a tournament and returns its ID.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tournament-v4.TournamentRegistrationParameters",
                "x-type": "TournamentRegistrationParameters"
              }
            }
          },
          "required": true,
          "description": "The tournament definition."
        }
      },
      "x-endpoint": "tournament-v4",
      "x-platforms-available": [
        "americas"
      ]
    },
    "/val/content/v1/contents": {
      "get": {
        "tags": [
          "val-content-v1"
        ],
        "summary": "Get content optionally filtered by locale",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#val-content-v1/GET_getContent"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/val-content-v1.ContentDto",
                  "x-type": "ContentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "val-content-v1.getContent",
        "description": "Get content optionally filtered by locale",
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "x-type": "String"
            }
          }
        ]
      },
      "x-endpoint": "val-content-v1",
      "x-platforms-available": [
        "ap",
        "br",
        "eu",
        "kr",
        "latam",
        "na"
      ]
    },
    "/val/match/v1/matches/{matchId}": {
      "get": {
        "tags": [
          "val-match-v1"
        ],
        "summary": "Get match by id",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatch"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/val-match-v1.MatchDto",
                  "x-type": "MatchDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "val-match-v1.getMatch",
        "description": "Get match by id",
        "parameters": [
          {
            "name": "matchId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "String"
            }
          }
        ]
      },
      "x-endpoint": "val-match-v1",
      "x-platforms-available": [
        "ap",
        "br",
        "eu",
        "kr",
        "latam",
        "na"
      ]
    },
    "/val/match/v1/matchlists/by-puuid/{puuid}": {
      "get": {
        "tags": [
          "val-match-v1"
        ],
        "summary": "Get matchlist for games played by puuid",
        "externalDocs": {
          "description": "Official API Reference",
          "url": "https://developer.riotgames.com/api-methods/#val-match-v1/GET_getMatchlist"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/val-match-v1.MatchlistDto",
                  "x-type": "MatchlistDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Data not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "429": {
            "description": "Rate limit exceeded"
          },
          "500": {
            "description": "Internal server error"
          },
          "502": {
            "description": "Bad gateway"
          },
          "503": {
            "description": "Service unavailable"
          },
          "504": {
            "description": "Gateway timeout"
          }
        },
        "operationId": "val-match-v1.getMatchlist",
        "description": "Get matchlist for games played by puuid",
        "parameters": [
          {
            "name": "puuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "x-type": "String"
            }
          }
        ]
      },
      "x-endpoint": "val-match-v1",
      "x-platforms-available": [
        "ap",
        "br",
        "eu",
        "kr",
        "latam",
        "na"
      ]
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "status_code": {
                "type": "integer"
              },
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "account-v1.AccountDto": {
        "type": "object",
        "title": "AccountDto",
        "properties": {
          "puuid": {
            "type": "string",
            "x-type": "string"
          },
          "gameName": {
            "type": "string",
            "x-type": "string"
          },
          "tagLine": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "puuid",
          "gameName",
          "tagLine"
        ]
      },
      "account-v1.ActiveShardDto": {
        "type": "object",
        "title": "ActiveShardDto",
        "properties": {
          "puuid": {
            "type": "string",
            "x-type": "string"
          },
          "game": {
            "type": "string",
            "x-type": "string"
          },
          "activeShard": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "puuid",
          "game",
          "activeShard"
        ]
      },
      "champion-mastery-v4.ChampionMasteryDTO": {
        "type": "object",
        "title": "ChampionMasteryDTO",
        "properties": {
          "championPointsUntilNextLevel": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion."
          },
          "chestGranted": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Is chest granted for this champion or not in current season."
          },
          "championId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Champion ID for this entry.",
            "x-enum": "champion"
          },
          "lastPlayTime": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Last time this champion was played by this player - in Unix milliseconds time format."
          },
          "championLevel": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Champion level for specified player and champion combination."
          },
          "summonerId": {
            "type": "string",
            "x-type": "string",
            "description": "Summoner ID for this entry. (Encrypted)"
          },
          "championPoints": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Total number of champion points for this player and champion combination - they are used to determine championLevel."
          },
          "championPointsSinceLastLevel": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Number of points earned since current level has been achieved."
          },
          "tokensEarned": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The token earned for this champion to levelup."
          }
        },
        "description": "This object contains single Champion Mastery information for player and champion combination.",
        "required": [
          "championPointsUntilNextLevel",
          "chestGranted",
          "championId",
          "lastPlayTime",
          "championLevel",
          "summonerId",
          "championPoints",
          "championPointsSinceLastLevel",
          "tokensEarned"
        ]
      },
      "champion-v3.ChampionInfo": {
        "type": "object",
        "title": "ChampionInfo",
        "properties": {
          "maxNewPlayerLevel": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "freeChampionIdsForNewPlayers": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "x-type": "int",
              "x-enum": "champion"
            },
            "x-type": "List[int]"
          },
          "freeChampionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "x-type": "int",
              "x-enum": "champion"
            },
            "x-type": "List[int]"
          }
        },
        "required": [
          "maxNewPlayerLevel",
          "freeChampionIdsForNewPlayers",
          "freeChampionIds"
        ]
      },
      "clash-v1.PlayerDto": {
        "type": "object",
        "title": "PlayerDto",
        "properties": {
          "summonerId": {
            "type": "string",
            "x-type": "string"
          },
          "teamId": {
            "type": "string",
            "x-type": "string"
          },
          "position": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "UNSELECTED",
              "FILL",
              "TOP",
              "JUNGLE",
              "MIDDLE",
              "BOTTOM",
              "UTILITY"
            ],
            "description": "(Legal values:  UNSELECTED,  FILL,  TOP,  JUNGLE,  MIDDLE,  BOTTOM,  UTILITY)"
          },
          "role": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "CAPTAIN",
              "MEMBER"
            ],
            "description": "(Legal values:  CAPTAIN,  MEMBER)"
          }
        },
        "required": [
          "summonerId",
          "teamId",
          "position",
          "role"
        ]
      },
      "clash-v1.TeamDto": {
        "type": "object",
        "title": "TeamDto",
        "properties": {
          "id": {
            "type": "string",
            "x-type": "string"
          },
          "tournamentId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "name": {
            "type": "string",
            "x-type": "string"
          },
          "iconId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "tier": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "captain": {
            "type": "string",
            "x-type": "string",
            "description": "Summoner ID of the team captain."
          },
          "abbreviation": {
            "type": "string",
            "x-type": "string"
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/clash-v1.PlayerDto",
              "x-type": "PlayerDto"
            },
            "x-type": "List[PlayerDto]",
            "description": "Team members."
          }
        },
        "required": [
          "id",
          "tournamentId",
          "name",
          "iconId",
          "tier",
          "captain",
          "abbreviation",
          "players"
        ]
      },
      "clash-v1.TournamentDto": {
        "type": "object",
        "title": "TournamentDto",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "themeId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "nameKey": {
            "type": "string",
            "x-type": "string"
          },
          "nameKeySecondary": {
            "type": "string",
            "x-type": "string"
          },
          "schedule": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/clash-v1.TournamentPhaseDto",
              "x-type": "TournamentPhaseDto"
            },
            "x-type": "List[TournamentPhaseDto]",
            "description": "Tournament phase."
          }
        },
        "required": [
          "id",
          "themeId",
          "nameKey",
          "nameKeySecondary",
          "schedule"
        ]
      },
      "clash-v1.TournamentPhaseDto": {
        "type": "object",
        "title": "TournamentPhaseDto",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "registrationTime": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "startTime": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "cancelled": {
            "type": "boolean",
            "x-type": "boolean"
          }
        },
        "required": [
          "id",
          "registrationTime",
          "startTime",
          "cancelled"
        ]
      },
      "league-exp-v4.LeagueEntryDTO": {
        "type": "object",
        "title": "LeagueEntryDTO",
        "properties": {
          "leagueId": {
            "type": "string",
            "x-type": "string"
          },
          "summonerId": {
            "type": "string",
            "x-type": "string",
            "description": "Player's summonerId (Encrypted)"
          },
          "summonerName": {
            "type": "string",
            "x-type": "string"
          },
          "queueType": {
            "type": "string",
            "x-type": "string",
            "x-enum": "queueType"
          },
          "tier": {
            "type": "string",
            "x-type": "string",
            "x-enum": "tier"
          },
          "rank": {
            "type": "string",
            "x-type": "string",
            "x-enum": "division"
          },
          "leaguePoints": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "wins": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Winning team on Summoners Rift. First placement in Teamfight Tactics."
          },
          "losses": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics."
          },
          "hotStreak": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "veteran": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "freshBlood": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "inactive": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "miniSeries": {
            "$ref": "#/components/schemas/league-exp-v4.MiniSeriesDTO",
            "x-type": "MiniSeriesDTO"
          }
        },
        "required": [
          "leagueId",
          "summonerId",
          "summonerName",
          "queueType",
          "tier",
          "rank",
          "leaguePoints",
          "wins",
          "losses",
          "hotStreak",
          "veteran",
          "freshBlood",
          "inactive"
        ]
      },
      "league-exp-v4.MiniSeriesDTO": {
        "type": "object",
        "title": "MiniSeriesDTO",
        "properties": {
          "losses": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "progress": {
            "type": "string",
            "x-type": "string"
          },
          "target": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "wins": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        },
        "required": [
          "losses",
          "progress",
          "target",
          "wins"
        ]
      },
      "league-v4.LeagueListDTO": {
        "type": "object",
        "title": "LeagueListDTO",
        "properties": {
          "leagueId": {
            "type": "string",
            "x-type": "string"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/league-v4.LeagueItemDTO",
              "x-type": "LeagueItemDTO"
            },
            "x-type": "List[LeagueItemDTO]"
          },
          "tier": {
            "type": "string",
            "x-type": "string",
            "x-enum": "tier"
          },
          "name": {
            "type": "string",
            "x-type": "string"
          },
          "queue": {
            "type": "string",
            "x-type": "string",
            "x-enum": "queueType"
          }
        },
        "required": [
          "leagueId",
          "entries",
          "tier",
          "name",
          "queue"
        ]
      },
      "league-v4.LeagueItemDTO": {
        "type": "object",
        "title": "LeagueItemDTO",
        "properties": {
          "freshBlood": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "wins": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Winning team on Summoners Rift."
          },
          "summonerName": {
            "type": "string",
            "x-type": "string"
          },
          "miniSeries": {
            "$ref": "#/components/schemas/league-v4.MiniSeriesDTO",
            "x-type": "MiniSeriesDTO"
          },
          "inactive": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "veteran": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "hotStreak": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "rank": {
            "type": "string",
            "x-type": "string",
            "x-enum": "division"
          },
          "leaguePoints": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "losses": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Losing team on Summoners Rift."
          },
          "summonerId": {
            "type": "string",
            "x-type": "string",
            "description": "Player's encrypted summonerId."
          }
        },
        "required": [
          "freshBlood",
          "wins",
          "summonerName",
          "inactive",
          "veteran",
          "hotStreak",
          "rank",
          "leaguePoints",
          "losses",
          "summonerId"
        ]
      },
      "league-v4.MiniSeriesDTO": {
        "type": "object",
        "title": "MiniSeriesDTO",
        "properties": {
          "losses": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "progress": {
            "type": "string",
            "x-type": "string"
          },
          "target": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "wins": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        },
        "required": [
          "losses",
          "progress",
          "target",
          "wins"
        ]
      },
      "league-v4.LeagueEntryDTO": {
        "type": "object",
        "title": "LeagueEntryDTO",
        "properties": {
          "leagueId": {
            "type": "string",
            "x-type": "string"
          },
          "summonerId": {
            "type": "string",
            "x-type": "string",
            "description": "Player's encrypted summonerId."
          },
          "summonerName": {
            "type": "string",
            "x-type": "string"
          },
          "queueType": {
            "type": "string",
            "x-type": "string",
            "x-enum": "queueType"
          },
          "tier": {
            "type": "string",
            "x-type": "string",
            "x-enum": "tier"
          },
          "rank": {
            "type": "string",
            "x-type": "string",
            "x-enum": "division"
          },
          "leaguePoints": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "wins": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Winning team on Summoners Rift."
          },
          "losses": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Losing team on Summoners Rift."
          },
          "hotStreak": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "veteran": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "freshBlood": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "inactive": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "miniSeries": {
            "$ref": "#/components/schemas/league-v4.MiniSeriesDTO",
            "x-type": "MiniSeriesDTO"
          }
        },
        "required": [
          "leagueId",
          "summonerId",
          "summonerName",
          "queueType",
          "tier",
          "rank",
          "leaguePoints",
          "wins",
          "losses",
          "hotStreak",
          "veteran",
          "freshBlood",
          "inactive"
        ]
      },
      "lol-status-v3.ShardStatus": {
        "type": "object",
        "title": "ShardStatus",
        "properties": {
          "locales": {
            "type": "array",
            "items": {
              "type": "string",
              "x-type": "string",
              "x-enum": "locale"
            },
            "x-type": "List[string]"
          },
          "hostname": {
            "type": "string",
            "x-type": "string"
          },
          "name": {
            "type": "string",
            "x-type": "string"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lol-status-v3.Service",
              "x-type": "Service"
            },
            "x-type": "List[Service]"
          },
          "slug": {
            "type": "string",
            "x-type": "string"
          },
          "region_tag": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "locales",
          "hostname",
          "name",
          "services",
          "slug",
          "region_tag"
        ]
      },
      "lol-status-v3.Service": {
        "type": "object",
        "title": "Service",
        "properties": {
          "incidents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lol-status-v3.Incident",
              "x-type": "Incident"
            },
            "x-type": "List[Incident]"
          },
          "name": {
            "type": "string",
            "x-type": "string"
          },
          "slug": {
            "type": "string",
            "x-type": "string"
          },
          "status": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "incidents",
          "name",
          "slug",
          "status"
        ]
      },
      "lol-status-v3.Incident": {
        "type": "object",
        "title": "Incident",
        "properties": {
          "active": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "created_at": {
            "type": "string",
            "x-type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lol-status-v3.Message",
              "x-type": "Message"
            },
            "x-type": "List[Message]"
          }
        },
        "required": [
          "active",
          "created_at",
          "id",
          "updates"
        ]
      },
      "lol-status-v3.Message": {
        "type": "object",
        "title": "Message",
        "properties": {
          "severity": {
            "type": "string",
            "x-type": "string"
          },
          "updated_at": {
            "type": "string",
            "x-type": "string"
          },
          "author": {
            "type": "string",
            "x-type": "string"
          },
          "translations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lol-status-v3.Translation",
              "x-type": "Translation"
            },
            "x-type": "List[Translation]"
          },
          "created_at": {
            "type": "string",
            "x-type": "string"
          },
          "id": {
            "type": "string",
            "x-type": "string"
          },
          "content": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "severity",
          "updated_at",
          "author",
          "translations",
          "created_at",
          "id",
          "content"
        ]
      },
      "lol-status-v3.Translation": {
        "type": "object",
        "title": "Translation",
        "properties": {
          "locale": {
            "type": "string",
            "x-type": "string",
            "x-enum": "locale"
          },
          "content": {
            "type": "string",
            "x-type": "string"
          },
          "heading": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "locale",
          "content",
          "heading"
        ]
      },
      "lor-ranked-v1.LeaderboardDto": {
        "type": "object",
        "title": "LeaderboardDto",
        "properties": {
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/lor-ranked-v1.PlayerDto",
              "x-type": "PlayerDto"
            },
            "x-type": "List[PlayerDto]",
            "description": "A list of players in Master tier."
          }
        },
        "required": [
          "players"
        ]
      },
      "lor-ranked-v1.PlayerDto": {
        "type": "object",
        "title": "PlayerDto",
        "properties": {
          "name": {
            "type": "string",
            "x-type": "string"
          },
          "rank": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "lp": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "League points."
          }
        },
        "required": [
          "name",
          "rank",
          "lp"
        ]
      },
      "match-v4.MatchDto": {
        "type": "object",
        "title": "MatchDto",
        "properties": {
          "gameId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "participantIdentities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v4.ParticipantIdentityDto",
              "x-type": "ParticipantIdentityDto"
            },
            "x-type": "List[ParticipantIdentityDto]",
            "description": "Participant identity information. Participant identity information is purposefully excluded for custom games."
          },
          "queueId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Please refer to the Game Constants documentation.",
            "x-enum": "queue"
          },
          "gameType": {
            "type": "string",
            "x-type": "string",
            "description": "Please refer to the Game Constants documentation.",
            "x-enum": "gameType"
          },
          "gameDuration": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Match duration in seconds."
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v4.TeamStatsDto",
              "x-type": "TeamStatsDto"
            },
            "x-type": "List[TeamStatsDto]",
            "description": "Team information."
          },
          "platformId": {
            "type": "string",
            "x-type": "string",
            "description": "Platform where the match was played."
          },
          "gameCreation": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Designates the timestamp when champion select ended and the loading screen appeared, NOT when the game timer was at 0:00."
          },
          "seasonId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Please refer to the Game Constants documentation.",
            "x-enum": "season"
          },
          "gameVersion": {
            "type": "string",
            "x-type": "string",
            "description": "The major.minor version typically indicates the patch the match was played on."
          },
          "mapId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Please refer to the Game Constants documentation.",
            "x-enum": "map"
          },
          "gameMode": {
            "type": "string",
            "x-type": "string",
            "description": "Please refer to the Game Constants documentation.",
            "x-enum": "gameMode"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v4.ParticipantDto",
              "x-type": "ParticipantDto"
            },
            "x-type": "List[ParticipantDto]",
            "description": "Participant information."
          }
        },
        "required": [
          "gameId",
          "participantIdentities",
          "queueId",
          "gameType",
          "gameDuration",
          "teams",
          "platformId",
          "gameCreation",
          "seasonId",
          "gameVersion",
          "mapId",
          "gameMode",
          "participants"
        ]
      },
      "match-v4.ParticipantIdentityDto": {
        "type": "object",
        "title": "ParticipantIdentityDto",
        "properties": {
          "participantId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "player": {
            "$ref": "#/components/schemas/match-v4.PlayerDto",
            "x-type": "PlayerDto",
            "description": "Player information not included in the response for custom matches. Custom matches are considered private unless a tournament code was used to create the match."
          }
        },
        "required": [
          "participantId",
          "player"
        ]
      },
      "match-v4.PlayerDto": {
        "type": "object",
        "title": "PlayerDto",
        "properties": {
          "profileIcon": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "accountId": {
            "type": "string",
            "x-type": "string",
            "description": "Player's original accountId."
          },
          "matchHistoryUri": {
            "type": "string",
            "x-type": "string"
          },
          "currentAccountId": {
            "type": "string",
            "x-type": "string",
            "description": "Player's current accountId when the match was played."
          },
          "currentPlatformId": {
            "type": "string",
            "x-type": "string",
            "description": "Player's current platformId when the match was played."
          },
          "summonerName": {
            "type": "string",
            "x-type": "string"
          },
          "summonerId": {
            "type": "string",
            "x-type": "string",
            "description": "Player's summonerId (Encrypted)"
          },
          "platformId": {
            "type": "string",
            "x-type": "string",
            "description": "Player's original platformId."
          }
        },
        "required": [
          "profileIcon",
          "accountId",
          "matchHistoryUri",
          "currentAccountId",
          "currentPlatformId",
          "summonerName",
          "summonerId",
          "platformId"
        ]
      },
      "match-v4.TeamStatsDto": {
        "type": "object",
        "title": "TeamStatsDto",
        "properties": {
          "towerKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Number of towers the team destroyed."
          },
          "riftHeraldKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Number of times the team killed Rift Herald."
          },
          "firstBlood": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Flag indicating whether or not the team scored the first blood."
          },
          "inhibitorKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Number of inhibitors the team destroyed."
          },
          "bans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v4.TeamBansDto",
              "x-type": "TeamBansDto"
            },
            "x-type": "List[TeamBansDto]",
            "description": "If match queueId has a draft, contains banned champion data, otherwise empty."
          },
          "firstBaron": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Flag indicating whether or not the team scored the first Baron kill."
          },
          "firstDragon": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Flag indicating whether or not the team scored the first Dragon kill."
          },
          "dominionVictoryScore": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "For Dominion matches, specifies the points the team had at game end."
          },
          "dragonKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Number of times the team killed Dragon."
          },
          "baronKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Number of times the team killed Baron."
          },
          "firstInhibitor": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Flag indicating whether or not the team destroyed the first inhibitor."
          },
          "firstTower": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Flag indicating whether or not the team destroyed the first tower."
          },
          "vilemawKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Number of times the team killed Vilemaw."
          },
          "firstRiftHerald": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Flag indicating whether or not the team scored the first Rift Herald kill."
          },
          "teamId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "100 for blue side. 200 for red side.",
            "x-enum": "team"
          },
          "win": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "Fail",
              "Win"
            ],
            "description": "String indicating whether or not the team won. There are only two values visibile in public match history.\n             (Legal values:  Fail,  Win)"
          }
        },
        "required": [
          "towerKills",
          "riftHeraldKills",
          "firstBlood",
          "inhibitorKills",
          "bans",
          "firstBaron",
          "firstDragon",
          "dominionVictoryScore",
          "dragonKills",
          "baronKills",
          "firstInhibitor",
          "firstTower",
          "vilemawKills",
          "firstRiftHerald",
          "teamId",
          "win"
        ]
      },
      "match-v4.TeamBansDto": {
        "type": "object",
        "title": "TeamBansDto",
        "properties": {
          "championId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Banned championId.",
            "x-enum": "champion"
          },
          "pickTurn": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Turn during which the champion was banned."
          }
        },
        "required": [
          "championId",
          "pickTurn"
        ]
      },
      "match-v4.ParticipantDto": {
        "type": "object",
        "title": "ParticipantDto",
        "properties": {
          "participantId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "championId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "x-enum": "champion"
          },
          "runes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v4.RuneDto",
              "x-type": "RuneDto"
            },
            "x-type": "List[RuneDto]",
            "description": "List of legacy Rune information. Not included for matches played with Runes Reforged."
          },
          "stats": {
            "$ref": "#/components/schemas/match-v4.ParticipantStatsDto",
            "x-type": "ParticipantStatsDto",
            "description": "Participant statistics."
          },
          "teamId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "100 for blue side. 200 for red side.",
            "x-enum": "team"
          },
          "timeline": {
            "$ref": "#/components/schemas/match-v4.ParticipantTimelineDto",
            "x-type": "ParticipantTimelineDto",
            "description": "Participant timeline data."
          },
          "spell1Id": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "First Summoner Spell id."
          },
          "spell2Id": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Second Summoner Spell id."
          },
          "highestAchievedSeasonTier": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "CHALLENGER",
              "MASTER",
              "DIAMOND",
              "PLATINUM",
              "GOLD",
              "SILVER",
              "BRONZE",
              "UNRANKED"
            ],
            "description": "Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.\n             (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED)",
            "x-enum": "tier"
          },
          "masteries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v4.MasteryDto",
              "x-type": "MasteryDto"
            },
            "x-type": "List[MasteryDto]",
            "description": "List of legacy Mastery information. Not included for matches played with Runes Reforged."
          }
        },
        "required": [
          "participantId",
          "championId",
          "stats",
          "teamId",
          "timeline",
          "spell1Id",
          "spell2Id"
        ]
      },
      "match-v4.RuneDto": {
        "type": "object",
        "title": "RuneDto",
        "properties": {
          "runeId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "rank": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        },
        "required": [
          "runeId",
          "rank"
        ]
      },
      "match-v4.ParticipantStatsDto": {
        "type": "object",
        "title": "ParticipantStatsDto",
        "properties": {
          "item0": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "item2": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalUnitsHealed": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "item1": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "largestMultiKill": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "goldEarned": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "firstInhibitorKill": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "physicalDamageTaken": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "nodeNeutralizeAssist": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalPlayerScore": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "champLevel": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "damageDealtToObjectives": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "totalDamageTaken": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "neutralMinionsKilled": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "deaths": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "tripleKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "magicDamageDealtToChampions": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "wardsKilled": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "pentaKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "damageSelfMitigated": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "largestCriticalStrike": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "nodeNeutralize": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalTimeCrowdControlDealt": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "firstTowerKill": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "magicDamageDealt": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "totalScoreRank": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "nodeCapture": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "wardsPlaced": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalDamageDealt": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "timeCCingOthers": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "magicalDamageTaken": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "largestKillingSpree": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalDamageDealtToChampions": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "physicalDamageDealtToChampions": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "neutralMinionsKilledTeamJungle": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalMinionsKilled": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "firstInhibitorAssist": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "visionWardsBoughtInGame": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "objectivePlayerScore": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "kills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "firstTowerAssist": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "combatPlayerScore": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "inhibitorKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "turretKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "participantId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "trueDamageTaken": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "firstBloodAssist": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "nodeCaptureAssist": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "assists": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "teamObjective": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "altarsNeutralized": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "goldSpent": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "damageDealtToTurrets": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "altarsCaptured": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "win": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "totalHeal": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "unrealKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "visionScore": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "physicalDamageDealt": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "firstBloodKill": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "longestTimeSpentLiving": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "killingSprees": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "sightWardsBoughtInGame": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "trueDamageDealtToChampions": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "neutralMinionsKilledEnemyJungle": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "doubleKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "trueDamageDealt": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "quadraKills": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "item4": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "item3": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "item6": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "item5": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "playerScore0": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "playerScore1": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "playerScore2": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "playerScore3": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "playerScore4": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "playerScore5": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "playerScore6": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "playerScore7": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "playerScore8": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "playerScore9": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "perk0": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Primary path keystone rune."
          },
          "perk0Var1": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk0Var2": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk0Var3": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk1": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Primary path rune."
          },
          "perk1Var1": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk1Var2": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk1Var3": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk2": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Primary path rune."
          },
          "perk2Var1": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk2Var2": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk2Var3": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk3": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Primary path rune."
          },
          "perk3Var1": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk3Var2": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk3Var3": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk4": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Secondary path rune."
          },
          "perk4Var1": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk4Var2": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk4Var3": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk5": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Secondary path rune."
          },
          "perk5Var1": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk5Var2": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perk5Var3": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Post game rune stats."
          },
          "perkPrimaryStyle": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Primary rune path"
          },
          "perkSubStyle": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Secondary rune path"
          }
        },
        "required": [
          "item0",
          "item2",
          "totalUnitsHealed",
          "item1",
          "largestMultiKill",
          "goldEarned",
          "physicalDamageTaken",
          "champLevel",
          "damageDealtToObjectives",
          "totalDamageTaken",
          "neutralMinionsKilled",
          "deaths",
          "tripleKills",
          "magicDamageDealtToChampions",
          "wardsKilled",
          "pentaKills",
          "damageSelfMitigated",
          "largestCriticalStrike",
          "totalTimeCrowdControlDealt",
          "magicDamageDealt",
          "totalDamageDealt",
          "timeCCingOthers",
          "magicalDamageTaken",
          "largestKillingSpree",
          "totalDamageDealtToChampions",
          "physicalDamageDealtToChampions",
          "neutralMinionsKilledTeamJungle",
          "totalMinionsKilled",
          "visionWardsBoughtInGame",
          "kills",
          "participantId",
          "trueDamageTaken",
          "assists",
          "goldSpent",
          "damageDealtToTurrets",
          "win",
          "totalHeal",
          "unrealKills",
          "physicalDamageDealt",
          "longestTimeSpentLiving",
          "killingSprees",
          "trueDamageDealtToChampions",
          "neutralMinionsKilledEnemyJungle",
          "doubleKills",
          "trueDamageDealt",
          "quadraKills",
          "item4",
          "item3",
          "item6",
          "item5"
        ]
      },
      "match-v4.ParticipantTimelineDto": {
        "type": "object",
        "title": "ParticipantTimelineDto",
        "properties": {
          "participantId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "csDiffPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "String"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[String, double]",
            "description": "Creep score difference versus the calculated lane opponent(s) for a specified period."
          },
          "damageTakenPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "String"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[String, double]",
            "description": "Damage taken for a specified period."
          },
          "role": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "DUO",
              "NONE",
              "SOLO",
              "DUO_CARRY",
              "DUO_SUPPORT"
            ],
            "description": "Participant's calculated role.\n             (Legal values:  DUO,  NONE,  SOLO,  DUO_CARRY,  DUO_SUPPORT)"
          },
          "damageTakenDiffPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "String"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[String, double]",
            "description": "Damage taken difference versus the calculated lane opponent(s) for a specified period."
          },
          "xpPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "String"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[String, double]",
            "description": "Experience change for a specified period."
          },
          "xpDiffPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "String"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[String, double]",
            "description": "Experience difference versus the calculated lane opponent(s) for a specified period."
          },
          "lane": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "MID",
              "MIDDLE",
              "TOP",
              "JUNGLE",
              "BOT",
              "BOTTOM"
            ],
            "description": "Participant's calculated lane. MID and BOT are legacy values.\n             (Legal values:  MID,  MIDDLE,  TOP,  JUNGLE,  BOT,  BOTTOM)"
          },
          "creepsPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "String"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[String, double]",
            "description": "Creeps for a specified period."
          },
          "goldPerMinDeltas": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "String"
            },
            "additionalProperties": {
              "type": "number",
              "format": "double",
              "x-type": "double"
            },
            "x-type": "Map[String, double]",
            "description": "Gold for a specified period."
          }
        }
      },
      "match-v4.MasteryDto": {
        "type": "object",
        "title": "MasteryDto",
        "properties": {
          "rank": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "masteryId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        },
        "required": [
          "rank",
          "masteryId"
        ]
      },
      "match-v4.MatchlistDto": {
        "type": "object",
        "title": "MatchlistDto",
        "properties": {
          "startIndex": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalGames": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "There is a known issue that this field doesn't correctly return the total number of games that match the parameters of the request. Please paginate using beginIndex until you reach the end of a player's matchlist."
          },
          "endIndex": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "matches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v4.MatchReferenceDto",
              "x-type": "MatchReferenceDto"
            },
            "x-type": "List[MatchReferenceDto]"
          }
        },
        "required": [
          "startIndex",
          "totalGames",
          "endIndex",
          "matches"
        ]
      },
      "match-v4.MatchReferenceDto": {
        "type": "object",
        "title": "MatchReferenceDto",
        "properties": {
          "gameId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "role": {
            "type": "string",
            "x-type": "string"
          },
          "season": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "platformId": {
            "type": "string",
            "x-type": "string"
          },
          "champion": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "x-enum": "champion"
          },
          "queue": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "x-enum": "queue"
          },
          "lane": {
            "type": "string",
            "x-type": "string"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          }
        },
        "required": [
          "gameId",
          "role",
          "season",
          "platformId",
          "champion",
          "queue",
          "lane",
          "timestamp"
        ]
      },
      "match-v4.MatchTimelineDto": {
        "type": "object",
        "title": "MatchTimelineDto",
        "properties": {
          "frames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v4.MatchFrameDto",
              "x-type": "MatchFrameDto"
            },
            "x-type": "List[MatchFrameDto]"
          },
          "frameInterval": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          }
        },
        "required": [
          "frames",
          "frameInterval"
        ]
      },
      "match-v4.MatchFrameDto": {
        "type": "object",
        "title": "MatchFrameDto",
        "properties": {
          "participantFrames": {
            "type": "object",
            "x-key": {
              "type": "string",
              "x-type": "String"
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/match-v4.MatchParticipantFrameDto",
              "x-type": "MatchParticipantFrameDto"
            },
            "x-type": "Map[String, MatchParticipantFrameDto]"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/match-v4.MatchEventDto",
              "x-type": "MatchEventDto"
            },
            "x-type": "List[MatchEventDto]"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          }
        },
        "required": [
          "participantFrames",
          "events",
          "timestamp"
        ]
      },
      "match-v4.MatchParticipantFrameDto": {
        "type": "object",
        "title": "MatchParticipantFrameDto",
        "properties": {
          "participantId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "minionsKilled": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "teamScore": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "dominionScore": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "totalGold": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "level": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "xp": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "currentGold": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "position": {
            "$ref": "#/components/schemas/match-v4.MatchPositionDto",
            "x-type": "MatchPositionDto"
          },
          "jungleMinionsKilled": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        },
        "required": [
          "participantId",
          "minionsKilled",
          "totalGold",
          "level",
          "xp",
          "currentGold",
          "jungleMinionsKilled"
        ]
      },
      "match-v4.MatchPositionDto": {
        "type": "object",
        "title": "MatchPositionDto",
        "properties": {
          "x": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "y": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        },
        "required": [
          "x",
          "y"
        ]
      },
      "match-v4.MatchEventDto": {
        "type": "object",
        "title": "MatchEventDto",
        "properties": {
          "laneType": {
            "type": "string",
            "x-type": "string"
          },
          "skillSlot": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "ascendedType": {
            "type": "string",
            "x-type": "string"
          },
          "creatorId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "afterId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "eventType": {
            "type": "string",
            "x-type": "string"
          },
          "type": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "CHAMPION_KILL",
              "WARD_PLACED",
              "WARD_KILL",
              "BUILDING_KILL",
              "ELITE_MONSTER_KILL",
              "ITEM_PURCHASED",
              "ITEM_SOLD",
              "ITEM_DESTROYED",
              "ITEM_UNDO",
              "SKILL_LEVEL_UP",
              "ASCENDED_EVENT",
              "CAPTURE_POINT",
              "PORO_KING_SUMMON"
            ],
            "description": "(Legal values:  CHAMPION_KILL,  WARD_PLACED,  WARD_KILL,  BUILDING_KILL,  ELITE_MONSTER_KILL,  ITEM_PURCHASED,  ITEM_SOLD,  ITEM_DESTROYED,  ITEM_UNDO,  SKILL_LEVEL_UP,  ASCENDED_EVENT,  CAPTURE_POINT,  PORO_KING_SUMMON)"
          },
          "levelUpType": {
            "type": "string",
            "x-type": "string"
          },
          "wardType": {
            "type": "string",
            "x-type": "string"
          },
          "participantId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "towerType": {
            "type": "string",
            "x-type": "string"
          },
          "itemId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "beforeId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "pointCaptured": {
            "type": "string",
            "x-type": "string"
          },
          "monsterType": {
            "type": "string",
            "x-type": "string"
          },
          "monsterSubType": {
            "type": "string",
            "x-type": "string"
          },
          "teamId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "x-enum": "team"
          },
          "position": {
            "$ref": "#/components/schemas/match-v4.MatchPositionDto",
            "x-type": "MatchPositionDto"
          },
          "killerId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "assistingParticipantIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "x-type": "List[int]"
          },
          "buildingType": {
            "type": "string",
            "x-type": "string"
          },
          "victimId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        },
        "required": [
          "type",
          "timestamp"
        ]
      },
      "spectator-v4.CurrentGameInfo": {
        "type": "object",
        "title": "CurrentGameInfo",
        "properties": {
          "gameId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the game"
          },
          "gameType": {
            "type": "string",
            "x-type": "string",
            "description": "The game type",
            "x-enum": "gameType"
          },
          "gameStartTime": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The game start time represented in epoch milliseconds"
          },
          "mapId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the map",
            "x-enum": "map"
          },
          "gameLength": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The amount of time in seconds that has passed since the game started"
          },
          "platformId": {
            "type": "string",
            "x-type": "string",
            "description": "The ID of the platform on which the game is being played"
          },
          "gameMode": {
            "type": "string",
            "x-type": "string",
            "description": "The game mode",
            "x-enum": "gameMode"
          },
          "bannedChampions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/spectator-v4.BannedChampion",
              "x-type": "BannedChampion"
            },
            "x-type": "List[BannedChampion]",
            "description": "Banned champion information"
          },
          "gameQueueConfigId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The queue type (queue types are documented on the Game Constants page)",
            "x-enum": "queue"
          },
          "observers": {
            "$ref": "#/components/schemas/spectator-v4.Observer",
            "x-type": "Observer",
            "description": "The observer information"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/spectator-v4.CurrentGameParticipant",
              "x-type": "CurrentGameParticipant"
            },
            "x-type": "List[CurrentGameParticipant]",
            "description": "The participant information"
          }
        },
        "required": [
          "gameId",
          "gameType",
          "gameStartTime",
          "mapId",
          "gameLength",
          "platformId",
          "gameMode",
          "bannedChampions",
          "observers",
          "participants"
        ]
      },
      "spectator-v4.BannedChampion": {
        "type": "object",
        "title": "BannedChampion",
        "properties": {
          "pickTurn": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The turn during which the champion was banned"
          },
          "championId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the banned champion",
            "x-enum": "champion"
          },
          "teamId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the team that banned the champion",
            "x-enum": "team"
          }
        },
        "required": [
          "pickTurn",
          "championId",
          "teamId"
        ]
      },
      "spectator-v4.Observer": {
        "type": "object",
        "title": "Observer",
        "properties": {
          "encryptionKey": {
            "type": "string",
            "x-type": "string",
            "description": "Key used to decrypt the spectator grid game data for playback"
          }
        },
        "required": [
          "encryptionKey"
        ]
      },
      "spectator-v4.CurrentGameParticipant": {
        "type": "object",
        "title": "CurrentGameParticipant",
        "properties": {
          "championId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the champion played by this participant",
            "x-enum": "champion"
          },
          "perks": {
            "$ref": "#/components/schemas/spectator-v4.Perks",
            "x-type": "Perks",
            "description": "Perks/Runes Reforged Information"
          },
          "profileIconId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the profile icon used by this participant"
          },
          "bot": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Flag indicating whether or not this participant is a bot"
          },
          "teamId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The team ID of this participant, indicating the participant's team",
            "x-enum": "team"
          },
          "summonerName": {
            "type": "string",
            "x-type": "string",
            "description": "The summoner name of this participant"
          },
          "summonerId": {
            "type": "string",
            "x-type": "string",
            "description": "The encrypted summoner ID of this participant"
          },
          "spell1Id": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the first summoner spell used by this participant"
          },
          "spell2Id": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the second summoner spell used by this participant"
          },
          "gameCustomizationObjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/spectator-v4.GameCustomizationObject",
              "x-type": "GameCustomizationObject"
            },
            "x-type": "List[GameCustomizationObject]",
            "description": "List of Game Customizations"
          }
        },
        "required": [
          "championId",
          "perks",
          "profileIconId",
          "bot",
          "teamId",
          "summonerName",
          "summonerId",
          "spell1Id",
          "spell2Id",
          "gameCustomizationObjects"
        ]
      },
      "spectator-v4.Perks": {
        "type": "object",
        "title": "Perks",
        "properties": {
          "perkIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "x-type": "long"
            },
            "x-type": "List[long]",
            "description": "IDs of the perks/runes assigned."
          },
          "perkStyle": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Primary runes path"
          },
          "perkSubStyle": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Secondary runes path"
          }
        },
        "required": [
          "perkIds",
          "perkStyle",
          "perkSubStyle"
        ]
      },
      "spectator-v4.GameCustomizationObject": {
        "type": "object",
        "title": "GameCustomizationObject",
        "properties": {
          "category": {
            "type": "string",
            "x-type": "string",
            "description": "Category identifier for Game Customization"
          },
          "content": {
            "type": "string",
            "x-type": "string",
            "description": "Game Customization content"
          }
        },
        "required": [
          "category",
          "content"
        ]
      },
      "spectator-v4.FeaturedGames": {
        "type": "object",
        "title": "FeaturedGames",
        "properties": {
          "gameList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/spectator-v4.FeaturedGameInfo",
              "x-type": "FeaturedGameInfo"
            },
            "x-type": "List[FeaturedGameInfo]",
            "description": "The list of featured games"
          },
          "clientRefreshInterval": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The suggested interval to wait before requesting FeaturedGames again"
          }
        },
        "required": [
          "gameList",
          "clientRefreshInterval"
        ]
      },
      "spectator-v4.FeaturedGameInfo": {
        "type": "object",
        "title": "FeaturedGameInfo",
        "properties": {
          "gameMode": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "CLASSIC",
              "ODIN",
              "ARAM",
              "TUTORIAL",
              "ONEFORALL",
              "ASCENSION",
              "FIRSTBLOOD",
              "KINGPORO"
            ],
            "description": "The game mode\n             (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO)",
            "x-enum": "gameMode"
          },
          "gameLength": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The amount of time in seconds that has passed since the game started"
          },
          "mapId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the map",
            "x-enum": "map"
          },
          "gameType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "CUSTOM_GAME",
              "MATCHED_GAME",
              "TUTORIAL_GAME"
            ],
            "description": "The game type\n             (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME)",
            "x-enum": "gameType"
          },
          "bannedChampions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/spectator-v4.BannedChampion",
              "x-type": "BannedChampion"
            },
            "x-type": "List[BannedChampion]",
            "description": "Banned champion information"
          },
          "gameId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the game"
          },
          "observers": {
            "$ref": "#/components/schemas/spectator-v4.Observer",
            "x-type": "Observer",
            "description": "The observer information"
          },
          "gameQueueConfigId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The queue type (queue types are documented on the Game Constants page)",
            "x-enum": "queue"
          },
          "gameStartTime": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The game start time represented in epoch milliseconds"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/spectator-v4.Participant",
              "x-type": "Participant"
            },
            "x-type": "List[Participant]",
            "description": "The participant information"
          },
          "platformId": {
            "type": "string",
            "x-type": "string",
            "description": "The ID of the platform on which the game is being played"
          }
        },
        "required": [
          "gameMode",
          "gameLength",
          "mapId",
          "gameType",
          "bannedChampions",
          "gameId",
          "observers",
          "gameQueueConfigId",
          "gameStartTime",
          "participants",
          "platformId"
        ]
      },
      "spectator-v4.Participant": {
        "type": "object",
        "title": "Participant",
        "properties": {
          "bot": {
            "type": "boolean",
            "x-type": "boolean",
            "description": "Flag indicating whether or not this participant is a bot"
          },
          "spell2Id": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the second summoner spell used by this participant"
          },
          "profileIconId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the profile icon used by this participant"
          },
          "summonerName": {
            "type": "string",
            "x-type": "string",
            "description": "The summoner name of this participant"
          },
          "championId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the champion played by this participant",
            "x-enum": "champion"
          },
          "teamId": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The team ID of this participant, indicating the participant's team",
            "x-enum": "team"
          },
          "spell1Id": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "The ID of the first summoner spell used by this participant"
          }
        },
        "required": [
          "bot",
          "spell2Id",
          "profileIconId",
          "summonerName",
          "championId",
          "teamId",
          "spell1Id"
        ]
      },
      "summoner-v4.SummonerDTO": {
        "type": "object",
        "title": "SummonerDTO",
        "properties": {
          "accountId": {
            "type": "string",
            "x-type": "string",
            "description": "Encrypted account ID. Max length 56 characters."
          },
          "profileIconId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "ID of the summoner icon associated with the summoner."
          },
          "revisionDate": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: summoner name change, summoner level change, or profile icon change."
          },
          "name": {
            "type": "string",
            "x-type": "string",
            "description": "Summoner name."
          },
          "id": {
            "type": "string",
            "x-type": "string",
            "description": "Encrypted summoner ID. Max length 63 characters."
          },
          "puuid": {
            "type": "string",
            "x-type": "string",
            "description": "Encrypted PUUID. Exact length of 78 characters."
          },
          "summonerLevel": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Summoner level associated with the summoner."
          }
        },
        "description": "represents a summoner",
        "required": [
          "accountId",
          "profileIconId",
          "revisionDate",
          "name",
          "id",
          "puuid",
          "summonerLevel"
        ]
      },
      "tft-league-v1.LeagueListDTO": {
        "type": "object",
        "title": "LeagueListDTO",
        "properties": {
          "leagueId": {
            "type": "string",
            "x-type": "string"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tft-league-v1.LeagueItemDTO",
              "x-type": "LeagueItemDTO"
            },
            "x-type": "List[LeagueItemDTO]"
          },
          "tier": {
            "type": "string",
            "x-type": "string",
            "x-enum": "tier"
          },
          "name": {
            "type": "string",
            "x-type": "string"
          },
          "queue": {
            "type": "string",
            "x-type": "string",
            "x-enum": "queueType"
          }
        },
        "required": [
          "leagueId",
          "entries",
          "tier",
          "name",
          "queue"
        ]
      },
      "tft-league-v1.LeagueItemDTO": {
        "type": "object",
        "title": "LeagueItemDTO",
        "properties": {
          "freshBlood": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "wins": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "First placement."
          },
          "summonerName": {
            "type": "string",
            "x-type": "string"
          },
          "miniSeries": {
            "$ref": "#/components/schemas/tft-league-v1.MiniSeriesDTO",
            "x-type": "MiniSeriesDTO"
          },
          "inactive": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "veteran": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "hotStreak": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "rank": {
            "type": "string",
            "x-type": "string",
            "x-enum": "division"
          },
          "leaguePoints": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "losses": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Second through eighth placement."
          },
          "summonerId": {
            "type": "string",
            "x-type": "string",
            "description": "Player's encrypted summonerId."
          }
        },
        "required": [
          "freshBlood",
          "wins",
          "summonerName",
          "inactive",
          "veteran",
          "hotStreak",
          "rank",
          "leaguePoints",
          "losses",
          "summonerId"
        ]
      },
      "tft-league-v1.MiniSeriesDTO": {
        "type": "object",
        "title": "MiniSeriesDTO",
        "properties": {
          "losses": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "progress": {
            "type": "string",
            "x-type": "string"
          },
          "target": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "wins": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        },
        "required": [
          "losses",
          "progress",
          "target",
          "wins"
        ]
      },
      "tft-league-v1.LeagueEntryDTO": {
        "type": "object",
        "title": "LeagueEntryDTO",
        "properties": {
          "leagueId": {
            "type": "string",
            "x-type": "string"
          },
          "summonerId": {
            "type": "string",
            "x-type": "string",
            "description": "Player's encrypted summonerId."
          },
          "summonerName": {
            "type": "string",
            "x-type": "string"
          },
          "queueType": {
            "type": "string",
            "x-type": "string",
            "x-enum": "queueType"
          },
          "tier": {
            "type": "string",
            "x-type": "string",
            "x-enum": "tier"
          },
          "rank": {
            "type": "string",
            "x-type": "string",
            "x-enum": "division"
          },
          "leaguePoints": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "wins": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "First placement."
          },
          "losses": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Second through eighth placement."
          },
          "hotStreak": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "veteran": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "freshBlood": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "inactive": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "miniSeries": {
            "$ref": "#/components/schemas/tft-league-v1.MiniSeriesDTO",
            "x-type": "MiniSeriesDTO"
          }
        },
        "required": [
          "leagueId",
          "summonerId",
          "summonerName",
          "queueType",
          "tier",
          "rank",
          "leaguePoints",
          "wins",
          "losses",
          "hotStreak",
          "veteran",
          "freshBlood",
          "inactive"
        ]
      },
      "tft-match-v1.MatchDto": {
        "type": "object",
        "title": "MatchDto",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/tft-match-v1.MetadataDto",
            "x-type": "MetadataDto",
            "description": "Match metadata."
          },
          "info": {
            "$ref": "#/components/schemas/tft-match-v1.InfoDto",
            "x-type": "InfoDto",
            "description": "Match info."
          }
        },
        "required": [
          "metadata",
          "info"
        ]
      },
      "tft-match-v1.MetadataDto": {
        "type": "object",
        "title": "MetadataDto",
        "properties": {
          "data_version": {
            "type": "string",
            "x-type": "string",
            "description": "Match data version."
          },
          "match_id": {
            "type": "string",
            "x-type": "string",
            "description": "Match id."
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "string",
              "x-type": "string"
            },
            "x-type": "List[string]",
            "description": "A list of encrypted participant PUUIDs."
          }
        },
        "required": [
          "data_version",
          "match_id",
          "participants"
        ]
      },
      "tft-match-v1.InfoDto": {
        "type": "object",
        "title": "InfoDto",
        "properties": {
          "game_datetime": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Unix timestamp."
          },
          "game_length": {
            "type": "number",
            "format": "float",
            "x-type": "float",
            "description": "Game length in seconds."
          },
          "game_variation": {
            "type": "string",
            "x-type": "string",
            "description": "Game variation key. Game variations documented in TFT static data."
          },
          "game_version": {
            "type": "string",
            "x-type": "string",
            "description": "Game client version."
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tft-match-v1.ParticipantDto",
              "x-type": "ParticipantDto"
            },
            "x-type": "List[ParticipantDto]",
            "description": "Participants."
          },
          "queue_id": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Please refer to the League of Legends documentation."
          },
          "tft_set_number": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Teamfight Tactics set number."
          }
        },
        "required": [
          "game_datetime",
          "game_length",
          "game_version",
          "participants",
          "queue_id",
          "tft_set_number"
        ]
      },
      "tft-match-v1.ParticipantDto": {
        "type": "object",
        "title": "ParticipantDto",
        "properties": {
          "companion": {
            "$ref": "#/components/schemas/tft-match-v1.CompanionDto",
            "x-type": "CompanionDto",
            "description": "Participant's companion."
          },
          "gold_left": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Gold left after participant was eliminated."
          },
          "last_round": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The round the participant was eliminated in. Note: If the player was eliminated in stage 2-1 their last_round would be 5."
          },
          "level": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Participant Little Legend level. Note: This is not the number of active units."
          },
          "placement": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Participant placement upon elimination."
          },
          "players_eliminated": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Number of players the participant eliminated."
          },
          "puuid": {
            "type": "string",
            "x-type": "string",
            "description": "Encrypted PUUID."
          },
          "time_eliminated": {
            "type": "number",
            "format": "float",
            "x-type": "float",
            "description": "The number of seconds before the participant was eliminated."
          },
          "total_damage_to_players": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Damage the participant dealt to other players."
          },
          "traits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tft-match-v1.TraitDto",
              "x-type": "TraitDto"
            },
            "x-type": "List[TraitDto]",
            "description": "A complete list of traits for the participant's active units."
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tft-match-v1.UnitDto",
              "x-type": "UnitDto"
            },
            "x-type": "List[UnitDto]",
            "description": "A list of active units for the participant."
          }
        },
        "required": [
          "companion",
          "gold_left",
          "last_round",
          "level",
          "placement",
          "players_eliminated",
          "puuid",
          "time_eliminated",
          "total_damage_to_players",
          "traits",
          "units"
        ]
      },
      "tft-match-v1.TraitDto": {
        "type": "object",
        "title": "TraitDto",
        "properties": {
          "name": {
            "type": "string",
            "x-type": "string",
            "description": "Trait name."
          },
          "num_units": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Number of units with this trait."
          },
          "tier_current": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Current active tier for the trait."
          },
          "tier_total": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Total tiers for the trait."
          }
        },
        "required": [
          "name",
          "num_units",
          "tier_current"
        ]
      },
      "tft-match-v1.UnitDto": {
        "type": "object",
        "title": "UnitDto",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "x-type": "int"
            },
            "x-type": "List[int]",
            "description": "A list of the unit's items. Please refer to the Teamfight Tactics documentation for item ids."
          },
          "character_id": {
            "type": "string",
            "x-type": "string",
            "description": "This field was introduced in patch 9.22 with data_version 2."
          },
          "name": {
            "type": "string",
            "x-type": "string",
            "description": "Unit name."
          },
          "rarity": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Unit rarity. This doesn't equate to the unit cost."
          },
          "tier": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "Unit tier."
          }
        },
        "required": [
          "items",
          "character_id",
          "name",
          "rarity",
          "tier"
        ]
      },
      "tft-match-v1.CompanionDto": {
        "type": "object",
        "title": "CompanionDto",
        "properties": {
          "skin_ID": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "content_ID": {
            "type": "string",
            "x-type": "string"
          },
          "species": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "skin_ID",
          "content_ID",
          "species"
        ]
      },
      "tft-summoner-v1.SummonerDTO": {
        "type": "object",
        "title": "SummonerDTO",
        "properties": {
          "accountId": {
            "type": "string",
            "x-type": "string",
            "description": "Encrypted account ID. Max length 56 characters."
          },
          "profileIconId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "ID of the summoner icon associated with the summoner."
          },
          "revisionDate": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: summoner name change, summoner level change, or profile icon change."
          },
          "name": {
            "type": "string",
            "x-type": "string",
            "description": "Summoner name."
          },
          "id": {
            "type": "string",
            "x-type": "string",
            "description": "Encrypted summoner ID. Max length 63 characters."
          },
          "puuid": {
            "type": "string",
            "x-type": "string",
            "description": "Encrypted PUUID. Exact length of 78 characters."
          },
          "summonerLevel": {
            "type": "integer",
            "format": "int64",
            "x-type": "long",
            "description": "Summoner level associated with the summoner."
          }
        },
        "description": "represents a summoner",
        "required": [
          "accountId",
          "profileIconId",
          "revisionDate",
          "name",
          "id",
          "puuid",
          "summonerLevel"
        ]
      },
      "tournament-stub-v4.TournamentCodeParameters": {
        "type": "object",
        "title": "TournamentCodeParameters",
        "properties": {
          "allowedSummonerIds": {
            "type": "array",
            "items": {
              "type": "string",
              "x-type": "string"
            },
            "x-type": "Set[string]",
            "description": "Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future."
          },
          "metadata": {
            "type": "string",
            "x-type": "string",
            "description": "Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game."
          },
          "teamSize": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "minimum": 1,
            "maximum": 5,
            "description": "The team size of the game. Valid values are 1-5."
          },
          "pickType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "BLIND_PICK",
              "DRAFT_MODE",
              "ALL_RANDOM",
              "TOURNAMENT_DRAFT"
            ],
            "description": "The pick type of the game.\n             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)"
          },
          "mapType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "SUMMONERS_RIFT",
              "TWISTED_TREELINE",
              "HOWLING_ABYSS"
            ],
            "description": "The map type of the game.\n             (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)"
          },
          "spectatorType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "NONE",
              "LOBBYONLY",
              "ALL"
            ],
            "description": "The spectator type of the game.\n             (Legal values:  NONE,  LOBBYONLY,  ALL)"
          }
        },
        "required": [
          "teamSize",
          "pickType",
          "mapType",
          "spectatorType"
        ]
      },
      "tournament-stub-v4.LobbyEventDTOWrapper": {
        "type": "object",
        "title": "LobbyEventDTOWrapper",
        "properties": {
          "eventList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tournament-stub-v4.LobbyEventDTO",
              "x-type": "LobbyEventDTO"
            },
            "x-type": "List[LobbyEventDTO]"
          }
        },
        "required": [
          "eventList"
        ]
      },
      "tournament-stub-v4.LobbyEventDTO": {
        "type": "object",
        "title": "LobbyEventDTO",
        "properties": {
          "summonerId": {
            "type": "string",
            "x-type": "string",
            "description": "The summonerId that triggered the event (Encrypted)"
          },
          "eventType": {
            "type": "string",
            "x-type": "string",
            "description": "The type of event that was triggered"
          },
          "timestamp": {
            "type": "string",
            "x-type": "string",
            "description": "Timestamp from the event"
          }
        },
        "required": [
          "summonerId",
          "eventType",
          "timestamp"
        ]
      },
      "tournament-stub-v4.ProviderRegistrationParameters": {
        "type": "object",
        "title": "ProviderRegistrationParameters",
        "properties": {
          "region": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "BR",
              "EUNE",
              "EUW",
              "JP",
              "LAN",
              "LAS",
              "NA",
              "OCE",
              "PBE",
              "RU",
              "TR"
            ],
            "description": "The region in which the provider will be running tournaments.\n             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)"
          },
          "url": {
            "type": "string",
            "x-type": "string",
            "description": "The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443)."
          }
        },
        "required": [
          "region",
          "url"
        ]
      },
      "tournament-stub-v4.TournamentRegistrationParameters": {
        "type": "object",
        "title": "TournamentRegistrationParameters",
        "properties": {
          "providerId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The provider ID to specify the regional registered provider data to associate this tournament."
          },
          "name": {
            "type": "string",
            "x-type": "string",
            "description": "The optional name of the tournament."
          }
        },
        "required": [
          "providerId"
        ]
      },
      "tournament-v4.TournamentCodeParameters": {
        "type": "object",
        "title": "TournamentCodeParameters",
        "properties": {
          "allowedSummonerIds": {
            "type": "array",
            "items": {
              "type": "string",
              "x-type": "string"
            },
            "x-type": "Set[string]",
            "description": "Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future."
          },
          "metadata": {
            "type": "string",
            "x-type": "string",
            "description": "Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game."
          },
          "teamSize": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "minimum": 1,
            "maximum": 5,
            "description": "The team size of the game. Valid values are 1-5."
          },
          "pickType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "BLIND_PICK",
              "DRAFT_MODE",
              "ALL_RANDOM",
              "TOURNAMENT_DRAFT"
            ],
            "description": "The pick type of the game.\n             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)"
          },
          "mapType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "SUMMONERS_RIFT",
              "TWISTED_TREELINE",
              "HOWLING_ABYSS"
            ],
            "description": "The map type of the game.\n             (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)"
          },
          "spectatorType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "NONE",
              "LOBBYONLY",
              "ALL"
            ],
            "description": "The spectator type of the game.\n             (Legal values:  NONE,  LOBBYONLY,  ALL)"
          }
        },
        "required": [
          "teamSize",
          "pickType",
          "mapType",
          "spectatorType"
        ]
      },
      "tournament-v4.TournamentCodeDTO": {
        "type": "object",
        "title": "TournamentCodeDTO",
        "properties": {
          "code": {
            "type": "string",
            "x-type": "string",
            "description": "The tournament code."
          },
          "spectators": {
            "type": "string",
            "x-type": "string",
            "description": "The spectator mode for the tournament code game."
          },
          "lobbyName": {
            "type": "string",
            "x-type": "string",
            "description": "The lobby name for the tournament code game."
          },
          "metaData": {
            "type": "string",
            "x-type": "string",
            "description": "The metadata for tournament code."
          },
          "password": {
            "type": "string",
            "x-type": "string",
            "description": "The password for the tournament code game."
          },
          "teamSize": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The team size for the tournament code game."
          },
          "providerId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The provider's ID."
          },
          "pickType": {
            "type": "string",
            "x-type": "string",
            "description": "The pick mode for tournament code game."
          },
          "tournamentId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The tournament's ID."
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The tournament code's ID."
          },
          "region": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "BR",
              "EUNE",
              "EUW",
              "JP",
              "LAN",
              "LAS",
              "NA",
              "OCE",
              "PBE",
              "RU",
              "TR"
            ],
            "description": "The tournament code's region.\n             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)"
          },
          "map": {
            "type": "string",
            "x-type": "string",
            "description": "The game map for the tournament code game"
          },
          "participants": {
            "type": "array",
            "items": {
              "type": "string",
              "x-type": "string"
            },
            "x-type": "Set[string]",
            "description": "The summonerIds of the participants (Encrypted)"
          }
        },
        "required": [
          "code",
          "spectators",
          "lobbyName",
          "metaData",
          "password",
          "teamSize",
          "providerId",
          "pickType",
          "tournamentId",
          "id",
          "region",
          "map",
          "participants"
        ]
      },
      "tournament-v4.TournamentCodeUpdateParameters": {
        "type": "object",
        "title": "TournamentCodeUpdateParameters",
        "properties": {
          "allowedSummonerIds": {
            "type": "array",
            "items": {
              "type": "string",
              "x-type": "string"
            },
            "x-type": "Set[string]",
            "description": "Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future."
          },
          "pickType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "BLIND_PICK",
              "DRAFT_MODE",
              "ALL_RANDOM",
              "TOURNAMENT_DRAFT"
            ],
            "description": "The pick type\n             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)"
          },
          "mapType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "SUMMONERS_RIFT",
              "TWISTED_TREELINE",
              "HOWLING_ABYSS"
            ],
            "description": "The map type\n             (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)"
          },
          "spectatorType": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "NONE",
              "LOBBYONLY",
              "ALL"
            ],
            "description": "The spectator type\n             (Legal values:  NONE,  LOBBYONLY,  ALL)"
          }
        },
        "required": [
          "pickType",
          "mapType",
          "spectatorType"
        ]
      },
      "tournament-v4.LobbyEventDTOWrapper": {
        "type": "object",
        "title": "LobbyEventDTOWrapper",
        "properties": {
          "eventList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tournament-v4.LobbyEventDTO",
              "x-type": "LobbyEventDTO"
            },
            "x-type": "List[LobbyEventDTO]"
          }
        },
        "required": [
          "eventList"
        ]
      },
      "tournament-v4.LobbyEventDTO": {
        "type": "object",
        "title": "LobbyEventDTO",
        "properties": {
          "timestamp": {
            "type": "string",
            "x-type": "string",
            "description": "Timestamp from the event"
          },
          "eventType": {
            "type": "string",
            "x-type": "string",
            "description": "The type of event that was triggered"
          },
          "summonerId": {
            "type": "string",
            "x-type": "string",
            "description": "The summonerId that triggered the event (Encrypted)"
          }
        },
        "required": [
          "timestamp",
          "eventType",
          "summonerId"
        ]
      },
      "tournament-v4.ProviderRegistrationParameters": {
        "type": "object",
        "title": "ProviderRegistrationParameters",
        "properties": {
          "region": {
            "type": "string",
            "x-type": "string",
            "enum": [
              "BR",
              "EUNE",
              "EUW",
              "JP",
              "LAN",
              "LAS",
              "NA",
              "OCE",
              "PBE",
              "RU",
              "TR"
            ],
            "description": "The region in which the provider will be running tournaments.\n             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)"
          },
          "url": {
            "type": "string",
            "x-type": "string",
            "description": "The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443)."
          }
        },
        "required": [
          "region",
          "url"
        ]
      },
      "tournament-v4.TournamentRegistrationParameters": {
        "type": "object",
        "title": "TournamentRegistrationParameters",
        "properties": {
          "providerId": {
            "type": "integer",
            "format": "int32",
            "x-type": "int",
            "description": "The provider ID to specify the regional registered provider data to associate this tournament."
          },
          "name": {
            "type": "string",
            "x-type": "string",
            "description": "The optional name of the tournament."
          }
        },
        "required": [
          "providerId"
        ]
      },
      "val-content-v1.ContentDto": {
        "type": "object",
        "title": "ContentDto",
        "properties": {
          "version": {
            "type": "string",
            "x-type": "string"
          },
          "characters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-content-v1.ContentItemDto",
              "x-type": "ContentItemDto"
            },
            "x-type": "List[ContentItemDto]"
          },
          "maps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-content-v1.ContentItemDto",
              "x-type": "ContentItemDto"
            },
            "x-type": "List[ContentItemDto]"
          },
          "chromas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-content-v1.ContentItemDto",
              "x-type": "ContentItemDto"
            },
            "x-type": "List[ContentItemDto]"
          },
          "skins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-content-v1.ContentItemDto",
              "x-type": "ContentItemDto"
            },
            "x-type": "List[ContentItemDto]"
          },
          "skinLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-content-v1.ContentItemDto",
              "x-type": "ContentItemDto"
            },
            "x-type": "List[ContentItemDto]"
          },
          "equips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-content-v1.ContentItemDto",
              "x-type": "ContentItemDto"
            },
            "x-type": "List[ContentItemDto]"
          },
          "gameModes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-content-v1.ContentItemDto",
              "x-type": "ContentItemDto"
            },
            "x-type": "List[ContentItemDto]"
          },
          "sprays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-content-v1.ContentItemDto",
              "x-type": "ContentItemDto"
            },
            "x-type": "List[ContentItemDto]"
          },
          "sprayLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-content-v1.ContentItemDto",
              "x-type": "ContentItemDto"
            },
            "x-type": "List[ContentItemDto]"
          },
          "charms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-content-v1.ContentItemDto",
              "x-type": "ContentItemDto"
            },
            "x-type": "List[ContentItemDto]"
          },
          "charmLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-content-v1.ContentItemDto",
              "x-type": "ContentItemDto"
            },
            "x-type": "List[ContentItemDto]"
          },
          "playerCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-content-v1.ContentItemDto",
              "x-type": "ContentItemDto"
            },
            "x-type": "List[ContentItemDto]"
          },
          "playerTitles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-content-v1.ContentItemDto",
              "x-type": "ContentItemDto"
            },
            "x-type": "List[ContentItemDto]"
          }
        },
        "required": [
          "version",
          "characters",
          "maps",
          "chromas",
          "skins",
          "skinLevels",
          "equips",
          "gameModes",
          "sprays",
          "sprayLevels",
          "charms",
          "charmLevels",
          "playerCards",
          "playerTitles"
        ]
      },
      "val-content-v1.ContentItemDto": {
        "type": "object",
        "title": "ContentItemDto",
        "properties": {
          "name": {
            "type": "string",
            "x-type": "string"
          },
          "localizedNames": {
            "$ref": "#/components/schemas/val-content-v1.LocalizedNamesDto",
            "x-type": "LocalizedNamesDto",
            "description": "This field is excluded from the response when a locale is set"
          },
          "assetName": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "name",
          "assetName"
        ]
      },
      "val-content-v1.LocalizedNamesDto": {
        "type": "object",
        "title": "LocalizedNamesDto",
        "properties": {
          "ar-AE": {
            "type": "string",
            "x-type": "string"
          },
          "de-DE": {
            "type": "string",
            "x-type": "string"
          },
          "en-GB": {
            "type": "string",
            "x-type": "string"
          },
          "en-US": {
            "type": "string",
            "x-type": "string"
          },
          "es-ES": {
            "type": "string",
            "x-type": "string"
          },
          "es-MX": {
            "type": "string",
            "x-type": "string"
          },
          "fr-FR": {
            "type": "string",
            "x-type": "string"
          },
          "id-ID": {
            "type": "string",
            "x-type": "string"
          },
          "it-IT": {
            "type": "string",
            "x-type": "string"
          },
          "ja-JP": {
            "type": "string",
            "x-type": "string"
          },
          "ko-KR": {
            "type": "string",
            "x-type": "string"
          },
          "pl-PL": {
            "type": "string",
            "x-type": "string"
          },
          "pt-BR": {
            "type": "string",
            "x-type": "string"
          },
          "ru-RU": {
            "type": "string",
            "x-type": "string"
          },
          "th-TH": {
            "type": "string",
            "x-type": "string"
          },
          "tr-TR": {
            "type": "string",
            "x-type": "string"
          },
          "vi-VN": {
            "type": "string",
            "x-type": "string"
          },
          "zh-CN": {
            "type": "string",
            "x-type": "string"
          },
          "zh-TW": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "ar-AE",
          "de-DE",
          "en-GB",
          "en-US",
          "es-ES",
          "es-MX",
          "fr-FR",
          "id-ID",
          "it-IT",
          "ja-JP",
          "ko-KR",
          "pl-PL",
          "pt-BR",
          "ru-RU",
          "th-TH",
          "tr-TR",
          "vi-VN",
          "zh-CN",
          "zh-TW"
        ]
      },
      "val-match-v1.MatchDto": {
        "type": "object",
        "title": "MatchDto",
        "properties": {
          "matchInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-match-v1.MatchInfoDto",
              "x-type": "MatchInfoDto"
            },
            "x-type": "List[MatchInfoDto]"
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-match-v1.PlayerDto",
              "x-type": "PlayerDto"
            },
            "x-type": "List[PlayerDto]"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-match-v1.TeamDto",
              "x-type": "TeamDto"
            },
            "x-type": "List[TeamDto]"
          },
          "roundResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-match-v1.RoundResultDto",
              "x-type": "RoundResultDto"
            },
            "x-type": "List[RoundResultDto]"
          }
        },
        "required": [
          "matchInfo",
          "players",
          "teams",
          "roundResults"
        ]
      },
      "val-match-v1.MatchInfoDto": {
        "type": "object",
        "title": "MatchInfoDto",
        "properties": {
          "matchId": {
            "type": "string",
            "x-type": "string"
          },
          "mapId": {
            "type": "string",
            "x-type": "string"
          },
          "gameLengthMillis": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "gameStartMillis": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "provisioningFlowId": {
            "type": "string",
            "x-type": "string"
          },
          "isCompleted": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "customGameName": {
            "type": "string",
            "x-type": "string"
          },
          "queueId": {
            "type": "string",
            "x-type": "string"
          },
          "gameMode": {
            "type": "string",
            "x-type": "string"
          },
          "isRanked": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "seasonId": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "matchId",
          "mapId",
          "gameLengthMillis",
          "gameStartMillis",
          "provisioningFlowId",
          "isCompleted",
          "customGameName",
          "queueId",
          "gameMode",
          "isRanked",
          "seasonId"
        ]
      },
      "val-match-v1.PlayerDto": {
        "type": "object",
        "title": "PlayerDto",
        "properties": {
          "puuid": {
            "type": "string",
            "x-type": "string"
          },
          "teamId": {
            "type": "string",
            "x-type": "string"
          },
          "partyId": {
            "type": "string",
            "x-type": "string"
          },
          "characterId": {
            "type": "string",
            "x-type": "string"
          },
          "stats": {
            "$ref": "#/components/schemas/val-match-v1.PlayerStatsDto",
            "x-type": "PlayerStatsDto"
          },
          "competitiveTier": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "playerCard": {
            "type": "string",
            "x-type": "string"
          },
          "playerTitle": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "puuid",
          "teamId",
          "partyId",
          "characterId",
          "stats",
          "competitiveTier",
          "playerCard",
          "playerTitle"
        ]
      },
      "val-match-v1.PlayerStatsDto": {
        "type": "object",
        "title": "PlayerStatsDto",
        "properties": {
          "puuid": {
            "type": "string",
            "x-type": "string"
          },
          "kills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-match-v1.KillDto",
              "x-type": "KillDto"
            },
            "x-type": "List[KillDto]"
          },
          "damage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-match-v1.DamageDto",
              "x-type": "DamageDto"
            },
            "x-type": "List[DamageDto]"
          },
          "score": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "economy": {
            "$ref": "#/components/schemas/val-match-v1.EconomyDto",
            "x-type": "EconomyDto"
          },
          "ability": {
            "$ref": "#/components/schemas/val-match-v1.AbilityDto",
            "x-type": "AbilityDto"
          }
        },
        "required": [
          "puuid",
          "kills",
          "damage",
          "score",
          "economy",
          "ability"
        ]
      },
      "val-match-v1.KillDto": {
        "type": "object",
        "title": "KillDto",
        "properties": {
          "gameTime": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "roundTime": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "killer": {
            "type": "string",
            "x-type": "string",
            "description": "PUUID"
          },
          "victim": {
            "type": "string",
            "x-type": "string",
            "description": "PUUID"
          },
          "victimLocation": {
            "$ref": "#/components/schemas/val-match-v1.LocationDto",
            "x-type": "LocationDto"
          },
          "assistants": {
            "type": "array",
            "items": {
              "type": "string",
              "x-type": "string"
            },
            "x-type": "List[string]",
            "description": "List of PUUIDs"
          },
          "playerLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-match-v1.PlayerLocationsDto",
              "x-type": "PlayerLocationsDto"
            },
            "x-type": "List[PlayerLocationsDto]"
          },
          "finishingDamage": {
            "$ref": "#/components/schemas/val-match-v1.FinishingDamageDto",
            "x-type": "FinishingDamageDto"
          }
        },
        "required": [
          "gameTime",
          "roundTime",
          "killer",
          "victim",
          "victimLocation",
          "assistants",
          "playerLocations",
          "finishingDamage"
        ]
      },
      "val-match-v1.LocationDto": {
        "type": "object",
        "title": "LocationDto",
        "properties": {
          "x": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "y": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        },
        "required": [
          "x",
          "y"
        ]
      },
      "val-match-v1.PlayerLocationsDto": {
        "type": "object",
        "title": "PlayerLocationsDto",
        "properties": {
          "puuid": {
            "type": "string",
            "x-type": "string"
          },
          "viewRadians": {
            "type": "number",
            "format": "float",
            "x-type": "float"
          },
          "location": {
            "$ref": "#/components/schemas/val-match-v1.LocationDto",
            "x-type": "LocationDto"
          }
        },
        "required": [
          "puuid",
          "viewRadians",
          "location"
        ]
      },
      "val-match-v1.FinishingDamageDto": {
        "type": "object",
        "title": "FinishingDamageDto",
        "properties": {
          "damageType": {
            "type": "string",
            "x-type": "string"
          },
          "damageItem": {
            "type": "string",
            "x-type": "string"
          },
          "isSecondaryFireMode": {
            "type": "boolean",
            "x-type": "boolean"
          }
        },
        "required": [
          "damageType",
          "damageItem",
          "isSecondaryFireMode"
        ]
      },
      "val-match-v1.DamageDto": {
        "type": "object",
        "title": "DamageDto",
        "properties": {
          "receiver": {
            "type": "string",
            "x-type": "string",
            "description": "PUUID"
          },
          "damage": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "legshots": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "bodyshots": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "headshots": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        },
        "required": [
          "receiver",
          "damage",
          "legshots",
          "bodyshots",
          "headshots"
        ]
      },
      "val-match-v1.EconomyDto": {
        "type": "object",
        "title": "EconomyDto",
        "properties": {
          "loadoutValue": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "weapon": {
            "type": "string",
            "x-type": "string"
          },
          "armor": {
            "type": "string",
            "x-type": "string"
          },
          "remaining": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "spent": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        },
        "required": [
          "loadoutValue",
          "weapon",
          "armor",
          "remaining",
          "spent"
        ]
      },
      "val-match-v1.AbilityDto": {
        "type": "object",
        "title": "AbilityDto",
        "properties": {
          "grenadeEffects": {
            "type": "string",
            "x-type": "string"
          },
          "ability1Effects": {
            "type": "string",
            "x-type": "string"
          },
          "ability2Effects": {
            "type": "string",
            "x-type": "string"
          },
          "ultimateEffects": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "grenadeEffects",
          "ability1Effects",
          "ability2Effects",
          "ultimateEffects"
        ]
      },
      "val-match-v1.TeamDto": {
        "type": "object",
        "title": "TeamDto",
        "properties": {
          "teamId": {
            "type": "string",
            "x-type": "string"
          },
          "won": {
            "type": "boolean",
            "x-type": "boolean"
          },
          "roundsPlayed": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "roundsWon": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          }
        },
        "required": [
          "teamId",
          "won",
          "roundsPlayed",
          "roundsWon"
        ]
      },
      "val-match-v1.RoundResultDto": {
        "type": "object",
        "title": "RoundResultDto",
        "properties": {
          "roundNum": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "roundResult": {
            "type": "string",
            "x-type": "string"
          },
          "roundCeremony": {
            "type": "string",
            "x-type": "string"
          },
          "winningTeam": {
            "type": "string",
            "x-type": "string"
          },
          "bombPlanter": {
            "type": "string",
            "x-type": "string",
            "description": "PUUID of player"
          },
          "bombDefuser": {
            "type": "string",
            "x-type": "string",
            "description": "PUUID of player"
          },
          "plantRoundTime": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "plantPlayerLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-match-v1.PlayerLocationsDto",
              "x-type": "PlayerLocationsDto"
            },
            "x-type": "List[PlayerLocationsDto]"
          },
          "plantLocation": {
            "$ref": "#/components/schemas/val-match-v1.LocationDto",
            "x-type": "LocationDto"
          },
          "plantSite": {
            "type": "string",
            "x-type": "string"
          },
          "defuseRoundTime": {
            "type": "integer",
            "format": "int32",
            "x-type": "int"
          },
          "defusePlayerLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-match-v1.PlayerLocationsDto",
              "x-type": "PlayerLocationsDto"
            },
            "x-type": "List[PlayerLocationsDto]"
          },
          "defuseLocation": {
            "$ref": "#/components/schemas/val-match-v1.LocationDto",
            "x-type": "LocationDto"
          },
          "playerStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-match-v1.PlayerStatsDto",
              "x-type": "PlayerStatsDto"
            },
            "x-type": "List[PlayerStatsDto]"
          },
          "roundResultCode": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "roundNum",
          "roundResult",
          "roundCeremony",
          "winningTeam",
          "bombPlanter",
          "bombDefuser",
          "plantRoundTime",
          "plantPlayerLocations",
          "plantLocation",
          "plantSite",
          "defuseRoundTime",
          "defusePlayerLocations",
          "defuseLocation",
          "playerStats",
          "roundResultCode"
        ]
      },
      "val-match-v1.MatchlistDto": {
        "type": "object",
        "title": "MatchlistDto",
        "properties": {
          "puuid": {
            "type": "string",
            "x-type": "string"
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/val-match-v1.MatchReferenceDto",
              "x-type": "MatchDto"
            },
            "x-type": "List[MatchDto]"
          }
        },
        "required": [
          "puuid",
          "history"
        ]
      },
      "val-match-v1.MatchReferenceDto": {
        "type": "object",
        "title": "MatchReferenceDto",
        "properties": {
          "matchId": {
            "type": "string",
            "x-type": "string"
          },
          "gameStartTime": {
            "type": "integer",
            "format": "int64",
            "x-type": "long"
          },
          "teamId": {
            "type": "string",
            "x-type": "string"
          }
        },
        "required": [
          "matchId",
          "gameStartTime",
          "teamId"
        ]
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "description": "API key in query param.",
        "name": "api_key",
        "in": "query"
      },
      "X-Riot-Token": {
        "type": "apiKey",
        "description": "API key in header.",
        "name": "X-Riot-Token",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "api_key": []
    },
    {
      "X-Riot-Token": []
    }
  ]
}