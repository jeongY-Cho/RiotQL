type Query {
  info: Info!
  summoner(
    region: RegionInput!
    encryptedAccountId: String
    summonerName: String
    encryptedPUUID: String
    encryptedSummonerId: String
  ): Summonerv4Summoner
  match(region: RegionInput!, matchId: MatchId!, game: Game!): Match
  rankedList(
    region: RegionInput!
    queue: AllRankedQueues!
    tier: LowerTier!
    division: Division!
    page: Int
  ): [Leaguev4LeagueEntry!]!
  """
  #### Implementation Notes:

  use the following arg combinations to get league lists

  ##### param combinations:

  tier & queue -> for ranks master and above

  leagueId & game -> for all ranks

  leagueId & queue -> for all ranks
  """
  rankedLeague(
    region: RegionInput!
    tier: Tier
    queue: AllRankedQueues
    leagueId: String
    game: Game
  ): Leaguev4LeagueList
  tournament(code: String!): Tournamentv4TournamentCode
  tournamentStub(code: String!): TournamentStub!
  """
  Get featured league games.
  note! game parameter is ignored atm
  """
  featuredGames(
    region: RegionInput!
    game: Game = League
  ): Spectatorv4FeaturedGames
  championRotation: Championv3ChampionInfo!
  clash(region: RegionInput!): Clash
}

# TODO: valorant match, lor match
union Match = Matchv4Match | Tftmatchv1Match

scalar MatchId

enum RegionInput {
  br1
  eun1
  euw1
  jp1
  kr
  la1
  la2
  na1
  oc1
  tr1
  ru
  americas
  asia
  europe
}

enum Game {
  League
  TFT
  "LOR is not implemented"
  LOR
  # TODO valorant endponts?
  # Valorant
}

enum UpperTier {
  CHALLENGER
  GRANDMASTER
  MASTER
}

enum LowerTier {
  DIAMOND
  PLATINUM
  GOLD
  SILVER
  BRONZE
  IRON
  UNRANKED
}

enum AllRankedQueues {
  RANKED_SOLO_5x5
  RANKED_TFT
  RANKED_FLEX_SR
  RANKED_FLEX_TT
}

enum Division {
  I
  II
  III
  IV
}
scalar Long

type Info {
  description: String!
  version: String
  constants: String
  repo: String
}

type TournamentStub {
  lobbyEvents: [Tournamentv4LobbyEvent!]!
}

type Clash {
  upcoming: [Clashv1Tournament!]!
  team(id: String!): Clashv1Team
  tournament(id: Int!): Clashv1Tournament
}
