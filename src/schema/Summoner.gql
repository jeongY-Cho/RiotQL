extend type Summonerv4Summoner {
  """
  Get matchlist for games played by this summoner and game title and filtered using given filter parameters, if any.

  ##### Implementation Notes
  A number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.

  If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.

  If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.

  If game specified is League, filter ignores count

  If game specified is TFT, filter only uses count
  """
  matchList(game: Game!, filter: MatchListFilterInput): MatchList
  """
  Get current game information for the given summoner.
  """
  activeMatch(game: Game!): Spectatorv4CurrentGameInfo
  """
  Get ranked details of this summoner by queue.
  """
  rank(queue: AllRankedQueues!): Leaguev4LeagueEntry
  """
  Get champion mastery information of this summoner
  """
  championMastery: ChampionMastery!
  """
  Get an array of clash registrations for this summoner.
  """
  clash: [Clashv1PlayerRegistration!]!
  region: RegionInput!
}

type Clashv1PlayerRegistration {
  "Clash lane assignment"
  position: Position!
  "Clash team role assignment"
  role: Role!
  summonerId: String!
  teamId: String!
  "Clash team details"
  team: Clashv1Team!
}

input MatchListFilterInput {
  "Champion Ids"
  champion: [Int!]
  "Queue type by id"
  queue: [QueueId!]
  "Season"
  season: [Int!]
  "Timestamp in UNIX milliseconds"
  endTime: Long
  "Timestamp in UNIX milliseconds"
  beginTime: Long
  """
  Last index of game to be returned.

  See notes
  """
  endIndex: Int
  """
  First index of game to be returned.

  See notes.
  """
  beginIndex: Int
  """
  Number of matches to return

  #### Note:

  Only for TFT
  """
  count: Int
}

# TODO: update with tft, lor, valorant current game info
# union ActiveMatch = SpectatorV4CurrentGameInfo | Null

"""
Matchlist return types. TFT matchlist returns only a list of ids
"""
union MatchList = Matchv4Matchlist | TFTMatchIdList

"""
TFT matchlist return type. Returns a list of match ids
"""
type TFTMatchIdList {
  matches: [String!]!
}

"League Game Queue Ids"
enum QueueId {
  q420
  q440
}

"Champion Mastery for league accounts"
type ChampionMastery {
  "Get a player's total champion mastery score, which is the sum of individual champion mastery levels."
  score: Int!
  "Get all champion mastery entries sorted by number of champion points descending filtered by champion Ids if specified."
  byChampion(champIds: [Int!]): [Championmasteryv4ChampionMastery!]
}
